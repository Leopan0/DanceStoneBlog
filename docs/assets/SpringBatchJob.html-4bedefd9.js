import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-a14d31c2.js";const e="/DanceStoneBlog/assets/i9le5z1x7c-5378f7fa.png",p={},o=t(`<h2 id="spring-batch——job配置与运行" tabindex="-1"><a class="header-anchor" href="#spring-batch——job配置与运行" aria-hidden="true">#</a> Spring Batch——Job配置与运行</h2><p>​ 在上文中介绍了批处理的概念以及Spring Batch相关的使用场景，后续将会陆续说明在代码层面如何使用。</p><h3 id="引入" tabindex="-1"><a class="header-anchor" href="#引入" aria-hidden="true">#</a> 引入</h3><p>​ Spring batch的引入非常简单，只需要引入Spring Framework、Datasource以及Spring Batch。在Spring Boot体系下只需引入<code>spring-boot-starter-batch</code> 即可。他已经涵盖了以上所有内容。</p><h3 id="job配置" tabindex="-1"><a class="header-anchor" href="#job配置" aria-hidden="true">#</a> Job配置</h3><p><code>Job</code>接口有多种多样的实现类，通常我们使用configuration类来构建获取一个<code>Job</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Job</span> <span class="token function">footballJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jobBuilderFactory<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;footballJob&quot;</span><span class="token punctuation">)</span> <span class="token comment">//Job名称</span>
        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token function">playerLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//Job Step</span>
        <span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token function">gameLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//Job Step</span>
        <span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token function">playerSummarization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//Job Step</span>
        <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的代码定义了一个<code>Job</code>实例，并且在这个实例中包含了三个Step实例</p><h4 id="重启-启动-配置" tabindex="-1"><a class="header-anchor" href="#重启-启动-配置" aria-hidden="true">#</a> 重启（启动）配置</h4><p>​ 批处理的一个核心问题是需要定义重启（启动）时的一些行为。当指定的<code>JobInstance</code> 被<code>JobExecution </code>执行时候即认为某个<code>Job</code>已经重启（启动）。理想状态下，所有的任务都应该可以从它们之前中断的位置启动，但是某些情况下这样做是无法实现的。开发人员可以关闭重启机制或认为每次启动都是新的<code>JobInstance </code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Job</span> <span class="token function">footballJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jobBuilderFactory<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;footballJob&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">preventRestart</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//防止重启</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="监听job-execution" tabindex="-1"><a class="header-anchor" href="#监听job-execution" aria-hidden="true">#</a> 监听Job Execution</h4><p>当任务执行完毕或开始执行时，需要执行一些处理工作。这个时候可以使用<code>JobExecutionListener</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">JobExecutionListener</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">beforeJob</span><span class="token punctuation">(</span><span class="token class-name">JobExecution</span> jobExecution<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">afterJob</span><span class="token punctuation">(</span><span class="token class-name">JobExecution</span> jobExecution<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>添加方式：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Job</span> <span class="token function">footballJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jobBuilderFactory<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;footballJob&quot;</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">listener</span><span class="token punctuation">(</span><span class="token function">sampleListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 		
        <span class="token comment">//JobExecutionListener的实现类</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是<code>afterJob</code>方法无论批处理任务成功还是失败都会被执行，所以增加以下判断：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">afterJob</span><span class="token punctuation">(</span><span class="token class-name">JobExecution</span> jobExecution<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> jobExecution<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">BatchStatus</span><span class="token punctuation">.</span><span class="token constant">COMPLETED</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//job success</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>jobExecution<span class="token punctuation">.</span><span class="token function">getStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">BatchStatus</span><span class="token punctuation">.</span><span class="token constant">FAILED</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token comment">//job failure</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了直接实现接口还可以用 @BeforeJob 和 @AfterJob 注解。</p><h4 id="java配置" tabindex="-1"><a class="header-anchor" href="#java配置" aria-hidden="true">#</a> Java配置</h4><p>​ 在Spring Batch 2.2.0版本之后（Spring 3.0+）支持纯Java配置。其核心是<code>@EnableBatchProcessing </code>注解和两个构造器。<code>@EnableBatchProcessing</code>的作用类似于Spring中的其他@Enable*,使用<code>@EnableBatchProcessing</code>之后会提供一个基本的配置用于执行批处理任务。</p><p>​ 对应的会有一系列<code>StepScope</code>实例被注入到Ioc容器中：<code>JobRepository</code>、<code>JobLauncher</code>、<code>JobRegistry</code>、<code>PlatformTransactionManager</code>、<code>JobBuilderFactory</code>以及<code>StepBuilderFactory</code>。</p><p>​ 配置的核心接口是<code>BatchConfigurer</code>，默认情况下需要在容器中指定<code>DataSource</code>，该数据源用于JobRepository相关的表。开发的过程中可以使用自定义的<code>BatchConfigurer</code>实现来提供以上所有的Bean。通常情况下可以扩展重载<code>DefaultBatchConfigurer</code>类中的Getter方法用于实现部分自定义功能：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">BatchConfigurer</span> <span class="token function">batchConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultBatchConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token class-name">PlatformTransactionManager</span> <span class="token function">getTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MyTransactionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用了<code>@EnableBatchProcessing</code>之后开发人员可以使用以下的方法来配置一个Job：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableBatchProcessing</span>
<span class="token annotation punctuation">@Import</span><span class="token punctuation">(</span><span class="token class-name">DataSourceConfiguration</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AppConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">JobBuilderFactory</span> jobs<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">StepBuilderFactory</span> steps<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Job</span> <span class="token function">job</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;step1&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Step</span> step1<span class="token punctuation">,</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;step2&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Step</span> step2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> jobs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;myJob&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>step1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>step2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">protected</span> <span class="token class-name">Step</span> <span class="token function">step1</span><span class="token punctuation">(</span><span class="token class-name">ItemReader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> reader<span class="token punctuation">,</span>
                         <span class="token class-name">ItemProcessor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> processor<span class="token punctuation">,</span>
                         <span class="token class-name">ItemWriter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> writer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> steps<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;step1&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> <span class="token function">chunk</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">reader</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">processor</span><span class="token punctuation">(</span>processor<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">writer</span><span class="token punctuation">(</span>writer<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">protected</span> <span class="token class-name">Step</span> <span class="token function">step2</span><span class="token punctuation">(</span><span class="token class-name">Tasklet</span> tasklet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> steps<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;step2&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">tasklet</span><span class="token punctuation">(</span>tasklet<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="jobrepository配置" tabindex="-1"><a class="header-anchor" href="#jobrepository配置" aria-hidden="true">#</a> JobRepository配置</h3><p>​ 一旦使用了<code>@EnableBatchProcessing</code> 注解，<code>JobRepository</code>即会被注入到IoCs容器中并自动使用容器中的<code>DataSource</code>。<code>JobRepository</code>用于处理批处理表的CURD，整个Spring Batch的运行都会使用到它。除了使用容器中默认的<code>DataSoruce</code>以及其他组件，还可以在<code>BatchConfigurer</code>中进行配置：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token class-name">JobRepository</span> <span class="token function">createJobRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">JobRepositoryFactoryBean</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JobRepositoryFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">setTransactionManager</span><span class="token punctuation">(</span>transactionManager<span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">setIsolationLevelForCreate</span><span class="token punctuation">(</span><span class="token string">&quot;ISOLATION_SERIALIZABLE&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">setTablePrefix</span><span class="token punctuation">(</span><span class="token string">&quot;BATCH_&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">setMaxVarCharLength</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> factory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在代码中可以看到，设置<code>JobRepository</code>需要<code>DataSource</code>和<code>TransactionManager</code>，如果没有指定将会使用容器中的默认配置。</p><h4 id="jobrepository的事物配置" tabindex="-1"><a class="header-anchor" href="#jobrepository的事物配置" aria-hidden="true">#</a> JobRepository的事物配置</h4><p>​ 默认情况下框架为<code>JobRepository</code>提供了默认<code>PlatformTransactionManager</code>事物管理。它用于确保批处理执行过程中的元数据正确的写入到指定数据源中。如果缺乏事物，那么框架产生元数据就无法和整个处理过程完全契合。</p><p>​ 如下图，在BatchConfigurer中的<code>setIsolationLevelForCreate</code>方法中可以指定事物的隔离等级：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">JobRepository</span> <span class="token function">createJobRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">JobRepositoryFactoryBean</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JobRepositoryFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">setTransactionManager</span><span class="token punctuation">(</span>transactionManager<span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">setIsolationLevelForCreate</span><span class="token punctuation">(</span><span class="token string">&quot;ISOLATION_REPEATABLE_READ&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> factory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>setIsolationLevelForCreate</code>方法支持2个值：<code>ISOLATION_SERIALIZABLE</code> 、<code>ISOLATION_REPEATABLE_READ</code> ，前者是默认配置，类似于<code>@Transactional(isolation = Isolation.SERIALIZABLE)</code>，表示查询和写入都是一次事物，会对事物进行严格的锁定，当事物完成提交后才能进行其他的读写操作，容易死锁。后者是读事物开放，写事物锁定。任何时候都可以快速的读取数据，但是写入事物有严格的事物机制。当一个事物挂起某些记录时，其他写操作必须排队。</p><h4 id="修改表名称" tabindex="-1"><a class="header-anchor" href="#修改表名称" aria-hidden="true">#</a> 修改表名称</h4><p>默认情况下，<code>JobRepository</code>管理的表都以*BATCH_*开头。需要时可以修改前缀：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// This would reside in your BatchConfigurer implementation</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token class-name">JobRepository</span> <span class="token function">createJobRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">JobRepositoryFactoryBean</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JobRepositoryFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">setTransactionManager</span><span class="token punctuation">(</span>transactionManager<span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">setTablePrefix</span><span class="token punctuation">(</span><span class="token string">&quot;SYSTEM.TEST_&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//修改前缀</span>
    <span class="token keyword">return</span> factory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="内存级存储" tabindex="-1"><a class="header-anchor" href="#内存级存储" aria-hidden="true">#</a> 内存级存储</h4><p>​ Spring Batch支持将运行时的状态数据（元数据）仅保存在内存中。重载<code>JobRepository</code>不设置<code>DataSource</code> 即可：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token class-name">JobRepository</span> <span class="token function">createJobRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">MapJobRepositoryFactoryBean</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MapJobRepositoryFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    factory<span class="token punctuation">.</span><span class="token function">setTransactionManager</span><span class="token punctuation">(</span>transactionManager<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> factory<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，内存级存储无法满足分布式系统。</p><h4 id="joblauncher配置" tabindex="-1"><a class="header-anchor" href="#joblauncher配置" aria-hidden="true">#</a> JobLauncher配置</h4><p>启用了<code>@EnableBatchProcessing </code>之后<code>JobLauncher</code> 会自动注入到容器中以供使用。此外可以自行进行配置：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token class-name">JobLauncher</span> <span class="token function">createJobLauncher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">SimpleJobLauncher</span> jobLauncher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleJobLauncher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    jobLauncher<span class="token punctuation">.</span><span class="token function">setJobRepository</span><span class="token punctuation">(</span>jobRepository<span class="token punctuation">)</span><span class="token punctuation">;</span>
    jobLauncher<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> jobLauncher<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>JobLauncher</code> 唯一的必要依赖只有<code>JobRepository</code>。如下图，Job的执行通常是一个同步过程：</p><p>![bpq56xfz43](img/Spring Batch Job/bpq56xfz43.png)</p><p>可以通过修改TaskExecutor来指定Job的执行过程：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">JobLauncher</span> <span class="token function">jobLauncher</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">SimpleJobLauncher</span> jobLauncher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleJobLauncher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    jobLauncher<span class="token punctuation">.</span><span class="token function">setJobRepository</span><span class="token punctuation">(</span><span class="token function">jobRepository</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    jobLauncher<span class="token punctuation">.</span><span class="token function">setTaskExecutor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleAsyncTaskExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//转换为异步任务</span>
    jobLauncher<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> jobLauncher<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样执行过程变为：</p><p><img src="`+e+`" alt="i9le5z1x7c"></p><h3 id="运行一个job" tabindex="-1"><a class="header-anchor" href="#运行一个job" aria-hidden="true">#</a> 运行一个Job</h3><p>以一个Http为例：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Controller</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JobLauncherController</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">JobLauncher</span> jobLauncher<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token class-name">Job</span> job<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">&quot;/jobLauncher.html&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>
        jobLauncher<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span>job<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">JobParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>单单是配置好<code>Job</code>是肯定无法执行的，还需要对Step进行配置。后面会陆续介绍。</p>`,55),c=[o];function i(u,l){return s(),a("div",null,c)}const k=n(p,[["render",i],["__file","SpringBatchJob.html.vue"]]);export{k as default};
