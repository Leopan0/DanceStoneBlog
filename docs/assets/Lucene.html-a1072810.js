import{_ as p}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o,c,a as n,b as a,d as t,f as l}from"./app-d2bd0ec7.js";const u={},i=l(`<h1 id="lucene" tabindex="-1"><a class="header-anchor" href="#lucene" aria-hidden="true">#</a> Lucene</h1><p>Lucene是Apache基金会jakarta项目组的一个子项目；</p><p>Lucene是一个开放源码的全文检索引擎工具包，<strong>提供了完整的查询引擎和索引引擎，部分语种文本分析引擎</strong>；</p><p>Lucene 在开源的搜索引擎里一直处于垄断地位，它的实现语言是 Java 语言。</p><p>现在常用的ElasticSearch、Solr等全文搜索引擎均是基于Lucene实现的。但Lucene是单机的模式</p><h2 id="lucene基础工作流程" tabindex="-1"><a class="header-anchor" href="#lucene基础工作流程" aria-hidden="true">#</a> Lucene基础工作流程</h2><p>索引的生成分为两个部分：</p><p>1）创建阶段：</p><ul><li>添加文档阶段，通过IndexWriter调用addDocument方法生成正向索引文件；</li><li>文档添加后，<strong>通过flush或merge操作生成倒排索引文件</strong>。</li></ul><p>2） 搜索阶段：</p><ul><li>用户通过查询语句向Lucene发送查询请求；</li><li>通过IndexSearch下的IndexReader读取索引库内容，获取文档索引；</li><li>得到搜索结果后，基于搜索算法对结果进行排序后返回。</li></ul><h2 id="lucene索引构成" tabindex="-1"><a class="header-anchor" href="#lucene索引构成" aria-hidden="true">#</a> Lucene索引构成</h2><h3 id="正向索引" tabindex="-1"><a class="header-anchor" href="#正向索引" aria-hidden="true">#</a> 正向索引</h3><p>Lucene的基础层次结构由<strong>索引、段、文档、域、词</strong>五个部分组成。正向索引的生成即为基于Lucene的基础层次结构一级一级处理文档并分解域存储词的过程。</p><p>索引文件层级关系如图1所示：</p><ul><li><strong>索引</strong>：Lucene索引库包含了搜索文本的所有内容，可以通过文件或文件流的方式存储在不同的数据库或文件目录下。</li><li><strong>段</strong>：一个索引中包含多个段，段与段之间相互独立。由于Lucene进行关键词检索时需要加载索引段进行下一步搜索，如果索引段较多会增加较大的I/O开销，减慢检索速度，因此写入时会通过段合并策略对不同的段进行合并。</li><li><strong>文档</strong>：Lucene会将文档写入段中，一个段中包含多个文档。</li><li><strong>域</strong>：一篇文档会包含多种不同的字段，不同的字段保存在不同的域中。</li><li><strong>词</strong>：Lucene会通过分词器将域中的字符串通过词法分析和语言处理后拆分成词，Lucene通过这些关键词进行全文检索。</li></ul><h3 id="倒排索引" tabindex="-1"><a class="header-anchor" href="#倒排索引" aria-hidden="true">#</a> 倒排索引</h3><p>Lucene全文索引的核心是基于<strong>倒排索引实现的快速索引机制</strong>。</p><p>倒排索引原理如图2所示，倒排索引简单来说就是基于分析器将文本内容进行分词后，记录每个词出现在哪篇文章中，从而通过用户输入的搜索词查询出包含该词的文章。</p><p><img src="https://pic1.zhimg.com/80/v2-318fea3b1397b9c6a9e270774d4bb1c8_720w.webp" alt="img"></p><p>根据图2，我们可以看出当我们模糊查询，相关性匹配（搜索）时，正排索引需要仔细比对值，而倒排效率则更高，不用过滤无关词段</p><p>倒排正是将这些文本记录拆分成词组，来关联索引</p><blockquote><p>**问题：**上述倒排索引使用时每次都需要将索引词加载到内存中，当文章数量较多，篇幅较长时，索引词可能会占用大量的存储空间，加载到内存后内存损耗较大。</p><p>从Lucene4开始，Lucene采用了FST来减少索引词带来的空间消耗。</p><p>FST(Finite StateTransducers)，中文名有限状态机转换器。其主要特点在于以下四点：</p><ul><li>查找词的时间复杂度为O(len(str))；</li><li>通过将前缀和后缀分开存储的方式，减少了存放词所需的空间；</li><li>加载时仅将前缀放入内存索引，后缀词在磁盘中进行存放，减少了内存索引使用空间的损耗；</li><li>FST结构在对PrefixQuery、FuzzyQuery、RegexpQuery等查询条件查询时，查询效率高。</li></ul></blockquote><h2 id="一个demo" tabindex="-1"><a class="header-anchor" href="#一个demo" aria-hidden="true">#</a> 一个Demo</h2><p>基于Lucene的引擎有很多，很多很简单好用、甚至支持了分布式，各种分词插件，但这儿还是简单演示一下基础的代码操作</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>	<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ParseException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建分析和索引文档目录</span>
        <span class="token class-name">StandardAnalyzer</span> analyzer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StandardAnalyzer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Path</span> path <span class="token operator">=</span> <span class="token class-name">Paths</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;E:/lucene-demo-index&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Directory</span> index <span class="token operator">=</span> <span class="token class-name">FSDirectory</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//增</span>
        <span class="token comment">// 1.创建索引，初始化一个writer</span>
        <span class="token class-name">IndexWriterConfig</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexWriterConfig</span><span class="token punctuation">(</span>analyzer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        config<span class="token punctuation">.</span><span class="token function">setOpenMode</span><span class="token punctuation">(</span><span class="token class-name">IndexWriterConfig<span class="token punctuation">.</span>OpenMode</span><span class="token punctuation">.</span><span class="token constant">CREATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">IndexWriter</span> writer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexWriter</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> config<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2 写入索引</span>
        <span class="token function">addDoc</span><span class="token punctuation">(</span>writer<span class="token punctuation">,</span> <span class="token string">&quot;Lucene in Action&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;193398817&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">addDoc</span><span class="token punctuation">(</span>writer<span class="token punctuation">,</span> <span class="token string">&quot;Lucene for Dummies&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;55320055Z&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">addDoc</span><span class="token punctuation">(</span>writer<span class="token punctuation">,</span> <span class="token string">&quot;Managing Gigabytes&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;55063554A&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">addDoc</span><span class="token punctuation">(</span>writer<span class="token punctuation">,</span> <span class="token string">&quot;The Art of Computer Science&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;9900333X&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 查</span>
        <span class="token comment">// 1.构造1个查询</span>
        <span class="token class-name">String</span> queryStr <span class="token operator">=</span> <span class="token string">&quot;lucene&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">Query</span> q <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">QueryParser</span><span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">,</span> analyzer<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>queryStr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;query: &quot;</span> <span class="token operator">+</span> q<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">int</span> hitsPerPage <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token comment">// 2 创建索引查询</span>
        <span class="token class-name">IndexReader</span> reader <span class="token operator">=</span> <span class="token class-name">DirectoryReader</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">IndexSearcher</span> searcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IndexSearcher</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3 执行查询</span>
        <span class="token class-name">TopDocs</span> docs <span class="token operator">=</span> searcher<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> hitsPerPage<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ScoreDoc</span><span class="token punctuation">[</span><span class="token punctuation">]</span> hits <span class="token operator">=</span> docs<span class="token punctuation">.</span>scoreDocs<span class="token punctuation">;</span>

        <span class="token comment">//结果展示</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;found &quot;</span> <span class="token operator">+</span> hits<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token string">&quot; results&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">ScoreDoc</span> hit <span class="token operator">:</span> hits<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> docId <span class="token operator">=</span> hit<span class="token punctuation">.</span>doc<span class="token punctuation">;</span>
            <span class="token class-name">Document</span> doc <span class="token operator">=</span> searcher<span class="token punctuation">.</span><span class="token function">doc</span><span class="token punctuation">(</span>docId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>doc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; - &quot;</span> <span class="token operator">+</span> doc<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;isbn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">addDoc</span><span class="token punctuation">(</span><span class="token class-name">IndexWriter</span> writer<span class="token punctuation">,</span> <span class="token class-name">String</span> title<span class="token punctuation">,</span> <span class="token class-name">String</span> isbn<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Document</span> doc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Document</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        doc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TextField</span><span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">,</span> title<span class="token punctuation">,</span> <span class="token class-name">Field<span class="token punctuation">.</span>Store</span><span class="token punctuation">.</span><span class="token constant">YES</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        doc<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringField</span><span class="token punctuation">(</span><span class="token string">&quot;isbn&quot;</span><span class="token punctuation">,</span> isbn<span class="token punctuation">,</span> <span class="token class-name">Field<span class="token punctuation">.</span>Store</span><span class="token punctuation">.</span><span class="token constant">YES</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        writer<span class="token punctuation">.</span><span class="token function">addDocument</span><span class="token punctuation">(</span>doc<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,27),r={href:"https://zhuanlan.zhihu.com/p/391168762",target:"_blank",rel:"noopener noreferrer"},k={href:"https://blog.csdn.net/SLN2432713617/article/details/90140515",target:"_blank",rel:"noopener noreferrer"};function d(m,v){const s=e("ExternalLinkIcon");return o(),c("div",null,[i,n("p",null,[n("a",r,[a("深度解析 Lucene 轻量级全文索引实现原理 - 知乎 (zhihu.com)"),t(s)])]),n("p",null,[n("a",k,[a("Lucene简介（一个 Demo 示例）_lucene demo-CSDN博客"),t(s)])])])}const g=p(u,[["render",d],["__file","Lucene.html.vue"]]);export{g as default};
