const e=JSON.parse('{"key":"v-e456e9a2","path":"/zh/%E5%90%8E%E7%AB%AF/Java/Redis/Redis%E7%9A%84%E5%90%84%E7%A7%8D%E9%94%81.html","title":"Redis的各种锁","lang":"zh-CN","frontmatter":{"title":"Redis的各种锁","date":"2024-03-18T00:00:00.000Z","tag":["Redis","Java"],"category":["Java"],"order":1,"isOriginal":true,"description":"Redis的各种锁 Redis一大用处就是系统中的各种锁，下面介绍几种锁的实现。以及他们的区别。 乐观锁与悲观锁 乐观锁与悲观锁是锁常用形式，很多中间件都能实现。 应用场景： 通常在高并发的环境下，多个线程去竞争同一个资源，比较常见的有高铁抢票系统，商品秒杀系统等，我们需要保证数据正确，同时系统的吞吐也要尽可能高。 两者异同 乐观锁和悲观锁，都是顾名思义，对资源的抢占情况是否乐观决定的，乐观锁通常认为资源没使用，不会去锁住资源。悲观锁则反之。 乐观锁是如何保证资源没有锁住时候，正确更新呢？ 乐观锁在更新前会对数据版本进行比对，不一致则说明情况不太乐观。资源版本不对。","head":[["meta",{"property":"og:url","content":"https://github.com/Leopan0/DanceStoneBlog/zh/%E5%90%8E%E7%AB%AF/Java/Redis/Redis%E7%9A%84%E5%90%84%E7%A7%8D%E9%94%81.html"}],["meta",{"property":"og:site_name","content":"会跳舞的石头"}],["meta",{"property":"og:title","content":"Redis的各种锁"}],["meta",{"property":"og:description","content":"Redis的各种锁 Redis一大用处就是系统中的各种锁，下面介绍几种锁的实现。以及他们的区别。 乐观锁与悲观锁 乐观锁与悲观锁是锁常用形式，很多中间件都能实现。 应用场景： 通常在高并发的环境下，多个线程去竞争同一个资源，比较常见的有高铁抢票系统，商品秒杀系统等，我们需要保证数据正确，同时系统的吞吐也要尽可能高。 两者异同 乐观锁和悲观锁，都是顾名思义，对资源的抢占情况是否乐观决定的，乐观锁通常认为资源没使用，不会去锁住资源。悲观锁则反之。 乐观锁是如何保证资源没有锁住时候，正确更新呢？ 乐观锁在更新前会对数据版本进行比对，不一致则说明情况不太乐观。资源版本不对。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"会跳舞的石头"}],["meta",{"property":"article:tag","content":"Redis"}],["meta",{"property":"article:tag","content":"Java"}],["meta",{"property":"article:published_time","content":"2024-03-18T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Redis的各种锁\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-03-18T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"会跳舞的石头\\",\\"url\\":\\"https://github.com/Leopan0/DanceStoneBlog\\"}]}"]]},"headers":[{"level":2,"title":"乐观锁与悲观锁","slug":"乐观锁与悲观锁","link":"#乐观锁与悲观锁","children":[{"level":3,"title":"两者异同","slug":"两者异同","link":"#两者异同","children":[]},{"level":3,"title":"乐观锁实现","slug":"乐观锁实现","link":"#乐观锁实现","children":[]},{"level":3,"title":"悲观锁","slug":"悲观锁","link":"#悲观锁","children":[]}]},{"level":2,"title":"分布式锁","slug":"分布式锁","link":"#分布式锁","children":[]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":7.78,"words":2335},"filePathRelative":"zh/后端/Java/Redis/Redis的各种锁.md","localizedDate":"2024年3月18日","excerpt":"<h1> Redis的各种锁</h1>\\n<p>Redis一大用处就是系统中的各种锁，下面介绍几种锁的实现。以及他们的区别。</p>\\n<h2> 乐观锁与悲观锁</h2>\\n<p>乐观锁与悲观锁是锁常用形式，很多中间件都能实现。</p>\\n<h4> 应用场景：</h4>\\n<p>通常在高并发的环境下，多个线程去竞争同一个资源，比较常见的有高铁抢票系统，商品秒杀系统等，我们需要保证数据正确，同时系统的吞吐也要尽可能高。</p>\\n<h3> 两者异同</h3>\\n<p>乐观锁和悲观锁，都是顾名思义，对资源的抢占情况是否乐观决定的，乐观锁通常认为资源没使用，不会去锁住资源。悲观锁则反之。</p>\\n<blockquote>\\n<p>乐观锁是如何保证资源没有锁住时候，正确更新呢？\\n乐观锁在更新前会对数据版本进行比对，不一致则说明情况不太乐观。资源版本不对。</p>\\n</blockquote>","copyright":{"author":"会跳舞的石头"},"autoDesc":true}');export{e as data};
