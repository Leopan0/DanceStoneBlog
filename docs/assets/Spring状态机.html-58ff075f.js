import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o as i,c as l,a as n,b as s,d as a,f as p}from"./app-824dbdc1.js";const u={},k=n("h1",{id:"spring-状态机",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#spring-状态机","aria-hidden":"true"},"#"),s(" Spring 状态机")],-1),r=n("h2",{id:"参考",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#参考","aria-hidden":"true"},"#"),s(" 参考")],-1),d={href:"https://docs.spring.io/spring-statemachine/docs/1.0.0.M3/reference/htmlsingle/#statemachine-examples-zookeeper",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.jianshu.com/p/5debd91aee9c",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.codetd.com/article/1010726",target:"_blank",rel:"noopener noreferrer"},b=p(`<p>状态机这一概念比 <code>Java</code> 出现的都要早，Spring 在这一模型的基础上，做出 Spring 状态机 框架。</p><h2 id="有限状态机" tabindex="-1"><a class="header-anchor" href="#有限状态机" aria-hidden="true">#</a> 有限状态机</h2><ul><li>有限状态机：简称状态机，是表示有限个状态以及在这些状态之间的转移和动作等行为的数学模型。应用FSM模型可以帮助对象生命周期的状态的顺序以及导致状态变化的事件进行管理。将状态和事件控制从不同的业务Service方法的if else中抽离出来。FSM的应用范围很广，对于有复杂状态流，扩展性要求比较高的场景都可以使用该模型。 下面是状态机模型中的4个要素，即现态、条件、动作、次态。 <ul><li>现态：是指当前所处的状态。</li><li>条件：又称为“事件”。当一个条件被满足，将会触发一个动作，或者执行一次状态的迁移。</li><li>动作：条件满足后执行的动作。动作执行完毕后，可以迁移到新的状态，也可以仍旧保持原状态。动作不是必需的，当条件满足后，也可以不执行任何动作，直接迁移到新状态。</li><li>次态：条件满足后要迁往的新状态。“次态”是相对于“现态”而言的，“次态”一旦被激活，就转变成新的“现态”了。</li></ul></li></ul><h2 id="状态机-demo" tabindex="-1"><a class="header-anchor" href="#状态机-demo" aria-hidden="true">#</a> 状态机 DEMO</h2><p>使用 Spring 状态机要先导入Starter包</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token comment">&lt;!--spring statemachine--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.statemachine<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-statemachine-core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>\${state-machine.version}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>编写相关 Java 配置文件</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token comment">// 开启状态机</span>
<span class="token annotation punctuation">@EnableStateMachine</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Order&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StateMachineConfig</span> <span class="token keyword">extends</span> <span class="token class-name">EnumStateMachineConfigurerAdapter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderState</span><span class="token punctuation">,</span> <span class="token class-name">OrderEvent</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token comment">// 状态机初始化</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">StateMachineStateConfigurer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderState</span><span class="token punctuation">,</span> <span class="token class-name">OrderEvent</span><span class="token punctuation">&gt;</span></span> states<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        states<span class="token punctuation">.</span><span class="token function">withStates</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">initial</span><span class="token punctuation">(</span><span class="token constant">UNCREATE</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">states</span><span class="token punctuation">(</span><span class="token class-name">EnumSet</span><span class="token punctuation">.</span><span class="token function">allOf</span><span class="token punctuation">(</span><span class="token class-name">OrderState</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 编写状态机触发流程</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">StateMachineTransitionConfigurer</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderState</span><span class="token punctuation">,</span> <span class="token class-name">OrderEvent</span><span class="token punctuation">&gt;</span></span> transitions<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        transitions<span class="token punctuation">.</span><span class="token function">withExternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token constant">UNCREATE</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span><span class="token constant">CREATE</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span><span class="token constant">CREATE_ORDER</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withExternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token constant">CREATE</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span><span class="token constant">PAIED</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span><span class="token constant">PAY</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withExternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token constant">PAIED</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span><span class="token constant">HARVESTED</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span><span class="token constant">SEND</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">withExternal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">source</span><span class="token punctuation">(</span><span class="token constant">HARVESTED</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">target</span><span class="token punctuation">(</span><span class="token constant">FINISH</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">event</span><span class="token punctuation">(</span><span class="token constant">CONFIRM</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>状态机流程的相关写法：</p><ul><li>withExternal 是当source和target不同时的写法，比如付款成功后状态发生的变化。</li><li>withInternal 当source和target相同时的串联写法，比如付款失败后都是待付款状态。</li><li>withExterna l的source和target用于执行前后状态、event为触发的事件、guard判断是否执行action。同时满足source、target、event、guard的条件后执行最后的action。</li><li>withChoice 当执行一个动作，可能导致多种结果时，可以选择使用choice+guard来跳转</li><li>withChoice根据guard的判断结果执行first/then的逻辑。</li><li>withChoice不需要发送事件来进行触发。</li></ul><p>这里还需要使用两个枚举来表示状态和触发事件</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 订单状态
 */</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">OrderState</span> <span class="token punctuation">{</span>
    <span class="token comment">// 未创建</span>
    <span class="token constant">UNCREATE</span><span class="token punctuation">,</span>
    <span class="token comment">// 创建,待支付</span>
    <span class="token constant">CREATE</span><span class="token punctuation">,</span>
    <span class="token comment">// 已支付，待发货</span>
    <span class="token constant">PAIED</span><span class="token punctuation">,</span>
    <span class="token comment">// 待收货</span>
    <span class="token constant">HARVESTED</span><span class="token punctuation">,</span>
    <span class="token comment">// 完成</span>
    <span class="token constant">FINISH</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 订单事件
 */</span>
<span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">OrderEvent</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建订单</span>
    <span class="token constant">CREATE_ORDER</span><span class="token punctuation">,</span>
    <span class="token comment">// 支付</span>
    <span class="token constant">PAY</span><span class="token punctuation">,</span>
    <span class="token comment">// 发货</span>
    <span class="token constant">SEND</span><span class="token punctuation">,</span>
    <span class="token comment">// 确认收货</span>
    <span class="token constant">CONFIRM</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="简单状态机" tabindex="-1"><a class="header-anchor" href="#简单状态机" aria-hidden="true">#</a> 简单状态机</h3><p>要保持状态机能够恢复读取，需要将状态机持久化</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 状态机持久化
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderStateMachinePersist</span> <span class="token keyword">implements</span> <span class="token class-name">StateMachinePersist</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderState</span><span class="token punctuation">,</span> <span class="token class-name">OrderEvent</span><span class="token punctuation">,</span> <span class="token class-name">OrderState</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">StateMachineContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderState</span><span class="token punctuation">,</span> <span class="token class-name">OrderEvent</span><span class="token punctuation">&gt;</span></span> stateMachineContext<span class="token punctuation">,</span> <span class="token class-name">OrderState</span> orderState<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">// 默认不持久化</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">StateMachineContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderState</span><span class="token punctuation">,</span> <span class="token class-name">OrderEvent</span><span class="token punctuation">&gt;</span></span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token class-name">OrderState</span> currentState<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultStateMachineContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>currentState<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 注入状态机状态持久化到 Spring容器
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">OrderStateMachinePersist</span> stateMachinePersist<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">StateMachinePersister</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderState</span><span class="token punctuation">,</span> <span class="token class-name">OrderEvent</span><span class="token punctuation">,</span> <span class="token class-name">OrderState</span><span class="token punctuation">&gt;</span></span> <span class="token function">getPersist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultStateMachinePersister</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>stateMachinePersist<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在简单状态流当中，我们设定一个简单的订单场景，订单的状态由状态机管理</p>`,18),g=p(`<p>然后编写业务流程，运行代码，即完成这样一个简单的 Spring 状态机</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Service</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">StateMachine</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderState</span><span class="token punctuation">,</span> <span class="token class-name">OrderEvent</span><span class="token punctuation">&gt;</span></span> stateMachine<span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">StateMachinePersister</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderState</span><span class="token punctuation">,</span> <span class="token class-name">OrderEvent</span><span class="token punctuation">,</span> <span class="token class-name">OrderState</span><span class="token punctuation">&gt;</span></span> machinePersister<span class="token punctuation">;</span>

    <span class="token comment">// 创建订单</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span><span class="token class-name">OrderEvent</span><span class="token punctuation">.</span><span class="token constant">CREATE_ORDER</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;order&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sendEvent</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token class-name">OrderState</span><span class="token punctuation">.</span><span class="token constant">UNCREATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 支付</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">payed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span><span class="token class-name">OrderEvent</span><span class="token punctuation">.</span><span class="token constant">PAY</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;order&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">sendEvent</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> <span class="token class-name">OrderState</span><span class="token punctuation">.</span><span class="token constant">CREATE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sendEvent</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token class-name">OrderState</span> currentState<span class="token punctuation">)</span><span class="token punctuation">{</span>
        stateMachine<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 恢复状态机到当前订单状态，可由我们控制（该方法实际是重新设置状态机实例状态）</span>
        machinePersister<span class="token punctuation">.</span><span class="token function">restore</span><span class="token punctuation">(</span>stateMachine<span class="token punctuation">,</span> currentState<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;事件前状态:{}&quot;</span><span class="token punctuation">,</span> stateMachine<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stateMachine<span class="token punctuation">.</span><span class="token function">sendEvent</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;事件后状态:{}&quot;</span><span class="token punctuation">,</span> stateMachine<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stateMachine<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="触发事件" tabindex="-1"><a class="header-anchor" href="#触发事件" aria-hidden="true">#</a> 触发事件</h3><p>​ 前面提到如果让状态机状态发生变化，实际业务，状态的变更，也会涉及一系列数据的变更， Spring 状态机提供状态变更监听，来触发我们对应的事件。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Service</span>
<span class="token comment">// 监听绑定对应的状态机</span>
<span class="token annotation punctuation">@WithStateMachine</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;Order&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderStateService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@SneakyThrows</span>
    <span class="token comment">// 监听对应注解</span>
    <span class="token annotation punctuation">@OnTransition</span><span class="token punctuation">(</span>source <span class="token operator">=</span> <span class="token string">&quot;UNCREATE&quot;</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token string">&quot;CREATE&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderEvent</span><span class="token punctuation">&gt;</span></span> message<span class="token punctuation">)</span><span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;创建订单：{}&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>@OnTransition</code> 注解能够监听状态变化，触发对应事件，通过 <code>Message</code> 参数，可以获取状态变更传递过来的值。</p>`,6);function h(f,S){const t=e("ExternalLinkIcon"),c=e("Mermaid");return i(),l("div",null,[k,r,n("blockquote",null,[n("p",null,[n("a",d,[s("Spring 状态机官方文档 (spring.io)"),a(t)])]),n("p",null,[n("a",v,[s("Spring Statemachine 状态机初探 - 简书 (jianshu.com)"),a(t)])]),n("p",null,[n("a",m,[s("Spring StateMachine - 代码天地 (codetd.com)"),a(t)])])]),b,a(c,{id:"mermaid-114",code:"eJxLL0osyFDwCeLiDPVzDnJ1DHFV0NWFMOL9g1xcg3R17RQgfC5OuIIAx0iQeICjp6sLFyeYAooGu/q5gIQ9HIPCXINDQFJwpgLIWH8/N88gX5ASN08/z2APLgD4EB9S"}),g])}const y=o(u,[["render",h],["__file","Spring状态机.html.vue"]]);export{y as default};
