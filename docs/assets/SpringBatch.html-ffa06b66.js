import{_ as i}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as u,c as d,a as s,b as n,d as a,w as c,f as e}from"./app-694d939e.js";const r="/DanceStoneBlog/assets/o5rhp13pza-6edc0086.png",k="/DanceStoneBlog/assets/3abuh4rdai-399f54d6.png",l="/DanceStoneBlog/assets/psksp63v9f-e5e3862b.png",m="/DanceStoneBlog/assets/vgpk2fnaar-a5a0e461.png",v="/DanceStoneBlog/assets/c9etsbwt90-08d2bbac.png",b={},h=e('<h1 id="spring-batch-java-批处理框架" tabindex="-1"><a class="header-anchor" href="#spring-batch-java-批处理框架" aria-hidden="true">#</a> Spring Batch Java 批处理框架</h1><h2 id="spring-batch-概念" tabindex="-1"><a class="header-anchor" href="#spring-batch-概念" aria-hidden="true">#</a> Spring Batch 概念</h2><h3 id="批处理的核心场景" tabindex="-1"><a class="header-anchor" href="#批处理的核心场景" aria-hidden="true">#</a> 批处理的核心场景</h3><ul><li>从某个位置读取大量的记录，位置可以是数据库、文件或者外部推送队列（MQ）。</li><li>根据业务需要实时处理读取的数据。</li><li>将处理后的数据写入某个位置，可以第一条一样，可以是数据库、文件或者推送到队列。</li></ul><h3 id="spring-batch能解决的批处理场景" tabindex="-1"><a class="header-anchor" href="#spring-batch能解决的批处理场景" aria-hidden="true">#</a> Spring Batch能解决的批处理场景</h3><p>​ Spring Batch为批处理提供了一个轻量化的解决方案，它根据批处理的需要迭代处理各种记录，提供事物功能。但是Spring Batch仅仅适用于&quot;脱机&quot;场景，在处理的过程中不能和外部进行任何交互，也不允许有任何输入。</p><h3 id="spring-batch的目标" tabindex="-1"><a class="header-anchor" href="#spring-batch的目标" aria-hidden="true">#</a> Spring Batch的目标</h3><ul><li>开发人员仅关注业务逻辑，底层框架的交互交由Spring Batch去处理。</li><li>能够清晰分离业务与框架，框架已经限定了批处理的业务切入点，业务开发只需关注这些切入点（Read、Process、Write）。</li><li>提供开箱即用的通用接口。</li><li>快速轻松的融入Spring 框架，基于Spring Framework能够快速扩展各种功能。</li><li>所有现有核心服务都应易于更换或扩展，而不会对基础架构层产生任何影响。</li></ul><h3 id="spring-batch结构" tabindex="-1"><a class="header-anchor" href="#spring-batch结构" aria-hidden="true">#</a> Spring Batch结构</h3><p><img src="'+r+'" alt="o5rhp13pza"></p><p>​ 如上图，通常情况下一个独立的JVM程序就是仅仅用于处理批处理，而不要和其他功能重叠。 在最后一层基础设置（Infrastructure）部分主要分为3个部分。<code>JobLauncher</code>、<code>Job</code>以及<code>Step</code>。每一个<code>Step</code>又细分为<code>ItemReader</code>、<code>ItemProcessor</code>、<code>ItemWirte</code>。使用<em>Spring Batch</em>主要就是知道每一个基础设置负责的内容，然后在对应的设施中实现对应的业务。</p><h3 id="spring-batch-批处理原则与建议" tabindex="-1"><a class="header-anchor" href="#spring-batch-批处理原则与建议" aria-hidden="true">#</a> Spring Batch 批处理原则与建议</h3><p>当我们构建一个批处理的过程时，必须注意以下原则：</p><ol><li>通常情况下，批处理的过程对系统和架构的设计要够要求比较高，因此尽可能的使用通用架构来处理批量数据处理，降低问题发生的可能性。Spring Batch是一个是一个轻量级的框架，适用于处理一些灵活并没有到海量的数据。</li><li>批处理应该尽可能的简单，尽量避免在单个批处理中去执行过于复杂的任务。我们可以将任务分成多个批处理或者多个步骤去实现。</li><li>保证数据处理和物理数据紧密相连。笼统的说就是我们在处理数据的过程中有很多步骤，在某些步骤执行完时应该就写入数据，而不是等所有都处理完。</li><li>尽可能减少系统资源的使用、尤其是耗费大量资源的IO以及跨服务器引用，尽量分配好数据处理的批量。</li><li>定期分析系统的IO使用情况、SQL语句的执行情况等，尽可能的减少不必要的IO操作。优化的原则有： <ol><li>尽量在一次事物中对同一数据进行读取或写缓存。</li><li>一次事物中，尽可能在开始就读取所有需要使用的数据。</li><li>优化索引，观察SQL的执行情况，尽量使用主键索引，尽量避免全表扫描或过多的索引扫描。</li></ol></li><li>不要在批处理中对相同的数据执行2次相同的操作。</li><li>对于批处理程序而言应该在批处理启动之前就分配足够的内存，以免处理的过程中去重新申请新的内存页。</li><li>对数据的完整性应该从最差的角度来考虑，每一步的处理都应该建立完备的数据校验。</li><li>对于数据的总量我们应该有一个和数据记录在数据结构的某个字段上。</li><li>所有的批处理系统都需要进行压力测试。</li><li>如果整个批处理的过程是基于文件系统，在处理的过程中请切记完成文件的备份以及文件内容的校验。</li></ol><h3 id="批处理的通用策略" tabindex="-1"><a class="header-anchor" href="#批处理的通用策略" aria-hidden="true">#</a> 批处理的通用策略</h3><p>和软件开发的设计模式一样，批处理也有各种各样的现成模式可供参考。当一个开发（设计）人员开始执行批处理任务时，应该将业务逻辑拆分为一下的步骤或者板块分批执行：</p><ol><li>数据转换：某个（某些）批处理的外部数据可能来自不同的外部系统或者外部提供者，这些数据的结构千差万别。在统一进行批量数据处理之前需要对这些数据进行转换，合并为一个统一的结构。因此在数据开始真正的执行业务处理之前，可以先搭建批处理任务将这些数据统一转换。</li><li>数据校验：批处理是对大量数据进行处理，并且数据的来源千差万别，所以批处理的输入数据需要对数据的完整性性进行校验（比如校验字段数据是否缺失）。另外批处理输出的数据也需要进行合适的校验（例如处理了100条数据，校验100条数据是否校验成功）</li><li>提取数据：批处理的工作是逐条从数据库或目标文件读取记录（records），提取时可以通过一些规则从数据源中进行数据筛选。</li><li>数据实时更新处理：根据业务要求，对实时数据进行处理。某些时候一行数据记录的处理需要绑定在一个事物之下。</li><li>输出记录到标准的文档格式：数据处理完成之后需要根据格式写入到对应的外部数据系统中。</li></ol><p>以上五个步骤是一个标准的数据批处理过程，Spring batch框架为业务实现提供了以上几个功能入口。</p><h3 id="数据额外处理" tabindex="-1"><a class="header-anchor" href="#数据额外处理" aria-hidden="true">#</a> 数据额外处理</h3><p>某些情况需要实现对数据进行额外处理，在进入批处理之前通过其他方式将数据进行处理。主要内容有：</p><ol><li>排序：由于批处理是以独立的行数据（record）进行处理的，在处理的时候并不知道记录前后关系。因此如果需要对整体数据进行排序，最好事先使用其他方式完成。</li><li>分割：数据拆分也建议使用独立的任务来完成。理由类似排序，因为批处理的过程都是以行记录为基本处理单位的，无法再对分割之后的数据进行扩展处理。</li><li>合并：理由如上。</li></ol><h3 id="常规数据源" tabindex="-1"><a class="header-anchor" href="#常规数据源" aria-hidden="true">#</a> 常规数据源</h3><p>批处理的数据源通常包括：</p><ol><li>数据库驱动链接（链接到数据库）对数据进行逐条提取。</li><li>文件驱动链接，对文件数据进行提取</li><li>消息驱动链接，从MQ、kafka等消息系统提取数据。</li></ol><h3 id="典型的处理过程" tabindex="-1"><a class="header-anchor" href="#典型的处理过程" aria-hidden="true">#</a> 典型的处理过程</h3><ol><li>在业务停止的窗口期进行批数据处理，例如银行对账、清结算都是在12点日切到黎明之间。简称为离线处理。</li><li>在线或并发批处理，但是需要对实际业务或用户的响应进行考量。</li><li>并行处理多种不同的批处理作业。</li><li>分区处理：将相同的数据分为不同的区块，然后按照相同的步骤分为许多独立的批处理任务对不同的区块进行处理。</li><li>以上处理过程进行组合。</li></ol><p>在执行2,3点批处理时需要注意事物隔离等级。</p><h3 id="spring-batch批处理的核心概念" tabindex="-1"><a class="header-anchor" href="#spring-batch批处理的核心概念" aria-hidden="true">#</a> Spring Batch批处理的核心概念</h3><p>下图是批处理的核心流程图。</p><p><img src="'+k+'" alt="3abuh4rdai"></p><p>​ Spring Batch同样按照批处理的标准实现了各个层级的组件。并且在框架级别保证数据的完整性和事物性。</p><p>​ 如图所示，在一个标准的批处理任务中组要涵盖的核心概念有<code>JobLauncher</code>、<code>Job</code>、<code>Step</code>，一个<code>Job</code>可以涵盖多个<code>Step</code>，一个<code>Job</code>对应一个启动的<code>JobLauncher</code>。一个<code>Step</code>中分为<code>ItemReader</code>、<code>ItemProcessor</code>、<code>ItemWriter</code>，根据字面意思它们分别对应数据提取、数据处理和数据写入。此外<code>JobLauncher</code>、<code>Job</code>、<code>Step</code>也称之为批处理的元数据（Metadata），它们会被存储到<code>JobRepository</code>中。</p><h4 id="job" tabindex="-1"><a class="header-anchor" href="#job" aria-hidden="true">#</a> Job</h4><p>简单的说<code>Job</code>是封装一个批处理过程的实体，与其他的Spring项目类似，<code>Job</code>可以通过XML或Java类配置，称职为”Job Configuration“.如下图<code>Job</code>是单个批处理的最顶层。</p><p><img src="'+l+`" alt="psksp63v9f"></p><p>为了便于理解，可以建立的理解为<code>Job</code>就是每一步（<code>Step</code>）实例的容器。他结合了多个<code>Step</code>，为它们提供统一的服务同时也为<code>Step</code>提供个性化的服务，比如步骤重启。通常情况下<code>Job的配置包含以下内容</code>：</p><ul><li>Job的名称</li><li>定义和排序<code>Step</code>执行实例。</li><li>标记每个<code>Step</code>是否可以重启。</li></ul><p>Spring Batch为Job接口提供了默认的实现——<code>SimpleJob</code>类，在类中实现了一些标准的批处理方法。下面的代码展示了如可申明一个<code>Job</code> (在Config类中)。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Job</span> <span class="token function">footballJob</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>jobBuilderFactory
        <span class="token comment">//get中命名了Job的名称</span>
        <span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;footballJob&quot;</span><span class="token punctuation">)</span> 
        <span class="token comment">//playerLoad、gameLoad、playerSummarization都是Step</span>
        <span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token function">playerLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  
        <span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token function">gameLoad</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token function">playerSummarization</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="jobinstance" tabindex="-1"><a class="header-anchor" href="#jobinstance" aria-hidden="true">#</a> JobInstance</h4><p><code>JobInstance</code>是指批处理作业运行的实例。例如一个批处理必须在每天执行一次，系统在2019年5月1日执行了一次我们称之为2019-05-01的实例，类似的还会有2019-05-02、2019-05-03实例。在特定的运行实践中，一个<code>Job</code>只有一个<code>JobInstance</code>以及对应的<code>JobParameters </code>，但是可以有多个<code>JobExecution</code> 。（<code>JobParameters</code> 、<code>JobExecution</code> 见后文）。同一个<code>JobInstance</code> 具有相同的上下文（<code>ExecutionContext</code> 内容见后文）。</p><h4 id="jobparameters" tabindex="-1"><a class="header-anchor" href="#jobparameters" aria-hidden="true">#</a> JobParameters</h4><p>前面讨论了<code>JobInstance</code> 与<code>Job</code> 的区别，但是具体的区别内容都是通过<code>JobParameters </code>体现的。一个<code>JobParameters</code> 对象中包含了一系列Job运行相关的参数，这些参数可以用于参考或者用于实际的业务使用。对应的关系如下图：</p><p><img src="`+l+'" alt="psksp63v9f (1)"></p><p>当我们执行2个不同的<code>JobInstance</code>时<code>JobParameters</code>中的属性都会有差异。可以简单的认为一个<code>JobInstance</code>的标识就是 <code>Job</code> + <code>JobParameters</code> 。</p><h4 id="jobexecution" tabindex="-1"><a class="header-anchor" href="#jobexecution" aria-hidden="true">#</a> JobExecution</h4><p>​ <code>JobExecution</code> 可以理解为单次运行<code>Job</code>的容器。一次<code>JobInstance</code>执行的结果可能是成功、也可能是失败。但是对于Spring Batch框架而言，只有返回运行成功才会视为完成一次批处理。例如2019-05-01执行了一次<code>JobInstance</code>，但是执行的过程失败，因此第二次还会有一个“相同的”的 <code>JobInstance</code> 被执行。</p><p>​ <code>Job</code> 可以定义批处理如何执行，<code>JobInstance</code> 纯粹的就是一个处理对象，把所有的内容、对象组织在一起，主要是为了当面临问题时定义正确的重启参数。而<code>JobExecution</code>是运行时的“容器”，记录动态运行时的各种属性和上线文，主要有一下内容：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>status</td><td>状态类名为BatchStatus，它指示了执行的状态。在执行的过程中状态为BatchStatus#STARTED，失败：BatchStatus#FAILED，完成：BatchStatus#COMPLETED</td></tr><tr><td>startTime</td><td>java.util.Date对象，标记批处理任务启动的系统时间，批处理任务未启动数据为空</td></tr><tr><td>endTime</td><td>java.util.Date对象，结束时间无论是否成功都包含该数据，如未处理完为空</td></tr><tr><td>exitStatus</td><td>ExitStatus类，记录运行结果。</td></tr><tr><td>createTime</td><td>java.util.Date, JobExecution的创建时间，某些使用execution已经创建但是并未开始运行。</td></tr><tr><td>lastUpdate</td><td>java.util.Date，最后一次更新时间</td></tr><tr><td>executionContext</td><td>批处理任务执行的所有用户数据</td></tr><tr><td>failureExceptions</td><td>记录在执行Job时的异常，对于排查问题非常有用</td></tr></tbody></table><p>对应的每次执行的结果会在元数据库中体现为：</p><p>BATCH_JOB_INSTANCE：</p><table><thead><tr><th>JOB_INST_ID</th><th>JOB_NAME</th></tr></thead><tbody><tr><td>1</td><td>EndOfDayJob</td></tr></tbody></table><p>BATCH_JOB_EXECUTION_PARAMS：</p><table><thead><tr><th>JOB_EXECUTION_ID</th><th>TYPE_CD</th><th>KEY_NAME</th><th>DATE_VAL</th><th>IDENTIFYING</th></tr></thead><tbody><tr><td>1</td><td>DATE</td><td>schedule.Date</td><td>2019-01-01</td><td>TRUE</td></tr></tbody></table><p>BATCH_JOB_EXECUTION：</p><table><thead><tr><th>JOB_EXEC_ID</th><th>JOB_INST_ID</th><th>START_TIME</th><th>END_TIME</th><th>STATUS</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>2019-01-01 21:00</td><td>2017-01-01 21:30</td><td>FAILED</td></tr></tbody></table><p>​</p><p>​ 当某个<code>Job</code>批处理任务失败之后会在对应的数据库表中路对应的状态。假设1月1号执行的任务失败，技术团队花费了大量的时间解决这个问题到了第二天21才继续执行这个任务。</p><p>BATCH_JOB_INSTANCE：</p><table><thead><tr><th>JOB_INST_ID</th><th>JOB_NAME</th></tr></thead><tbody><tr><td>1</td><td>EndOfDayJob</td></tr><tr><td>2</td><td>EndOfDayJob</td></tr></tbody></table><p>BATCH_JOB_EXECUTION_PARAMS：</p><table><thead><tr><th>JOB_EXECUTION_ID</th><th>TYPE_CD</th><th>KEY_NAME</th><th>DATE_VAL</th><th>IDENTIFYING</th></tr></thead><tbody><tr><td>1</td><td>DATE</td><td>schedule.Date</td><td>2019-01-01</td><td>TRUE</td></tr><tr><td>2</td><td>DATE</td><td>schedule.Date</td><td>2019-01-01</td><td>TRUE</td></tr><tr><td>3</td><td>DATE</td><td>schedule.Date</td><td>2019-01-02</td><td>TRUE</td></tr></tbody></table><p>BATCH_JOB_EXECUTION：</p><table><thead><tr><th>JOB_EXEC_ID</th><th>JOB_INST_ID</th><th>START_TIME</th><th>END_TIME</th><th>STATUS</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>2019-01-01 21:00</td><td>2017-01-01 21:30</td><td>FAILED</td></tr><tr><td>2</td><td>1</td><td>2019-01-02 21:00</td><td>2017-01-02 21:30</td><td>COMPLETED</td></tr><tr><td>3</td><td>2</td><td>2019-01-02 21:31</td><td>2017-01-02 22:29</td><td>COMPLETED</td></tr></tbody></table><p>从数据上看好似<code>JobInstance</code>是一个接一个顺序执行的，但是对于Spring Batch并没有进行任何控制。不同的<code>JobInstance</code>很有可能是同时在运行（相同的<code>JobInstance</code>同时运行会抛出<code>JobExecutionAlreadyRunningException</code>异常）。</p><h4 id="step" tabindex="-1"><a class="header-anchor" href="#step" aria-hidden="true">#</a> Step</h4><p>​ <code>Step</code>是批处理重复运行的最小单元，它按照顺序定义了一次执行的必要过程。因此每个<code>Job</code>可以视作由一个或多个多个<code>Step</code>组成。一个<code>Step</code>包含了所有所有进行批处理的必要信息，这些信息的内容是由开发人员决定的并没有统一的标准。一个<code>Step</code>可以很简单，也可以很复杂。他可以是复杂业务的组合，也有可能仅仅用于迁移数据。与<code>JobExecution</code>的概念类似，<code>Step</code>也有特定的<code>StepExecution</code>，关系结构如下：</p><p><img src="'+m+`" alt="vgpk2fnaar"></p><h4 id="stepexecution" tabindex="-1"><a class="header-anchor" href="#stepexecution" aria-hidden="true">#</a> StepExecution</h4><p>​ <code>StepExecution</code>表示单次执行Step的容器，每次<code>Step</code>执行时都会有一个新的<code>StepExecution</code>被创建。与<code>JobExecution</code>不同的是，当某个<code>Step</code>执行失败后并不会再次尝试重新执行该<code>Step</code>。<code>StepExecution</code>包含以下属性：</p><table><thead><tr><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>status</td><td>状态类名为BatchStatus，它指示了执行的状态。在执行的过程中状态为BatchStatus#STARTED，失败：BatchStatus#FAILED，完成：BatchStatus#COMPLETED</td></tr><tr><td>startTime</td><td>java.util.Date对象，标记StepExecution启动的系统时间，未启动数据为空</td></tr><tr><td>endTime</td><td>java.util.Date对象，结束时间，无论是否成功都包含该数据，如未处理完为空</td></tr><tr><td>exitStatus</td><td>ExitStatus类，记录运行结果。</td></tr><tr><td>createTime</td><td>java.util.Date,JobExecution的创建时间，某些使用execution已经创建但是并未开始运行。</td></tr><tr><td>lastUpdate</td><td>java.util.Date，最后一次更新时间</td></tr><tr><td>executionContext</td><td>批处理任务执行的所有用户数据</td></tr><tr><td>readCount</td><td>成功读取数据的次数</td></tr><tr><td>wirteCount</td><td>成功写入数据的次数</td></tr><tr><td>commitCount</td><td>成功提交数据的次数</td></tr><tr><td>rollbackCount</td><td>回归数据的次数，有业务代码触发</td></tr><tr><td>readSkipCount</td><td>当读数据发生错误时跳过处理的次数</td></tr><tr><td>processSkipCount</td><td>当处理过程发生错误，跳过处理的次数</td></tr><tr><td>filterCount</td><td>被过滤规则拦截未处理的次数</td></tr><tr><td>writeSkipCount</td><td>写数据失败，跳过处理的次数</td></tr></tbody></table><h4 id="executioncontext" tabindex="-1"><a class="header-anchor" href="#executioncontext" aria-hidden="true">#</a> ExecutionContext</h4><p>前文已经多次提到<code>ExecutionContext</code>。可以简单的认为<code>ExecutionContext</code>提供了一个<em>Key/Value</em>机制，在<code>StepExecution</code>和<code>JobExecution</code>对象的任何位置都可以获取到<code>ExecutionContext</code>中的任何数据。最有价值的作用是记录数据的执行位置，以便发生重启时候从对应的位置继续执行：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>executionContext<span class="token punctuation">.</span><span class="token function">putLong</span><span class="token punctuation">(</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token constant">LINES_READ_COUNT</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reader<span class="token punctuation">.</span><span class="token function">getPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>比如在任务中有一个名为“loadData”的<code>Step</code>，他的作用是从文件中读取数据写入到数据库，当第一次执行失败后，数据库中有如下数据：</p><p>BATCH_JOB_INSTANCE：</p><table><thead><tr><th style="text-align:left;">JOB_INST_ID</th><th style="text-align:left;">JOB_NAME</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">EndOfDayJob</td></tr></tbody></table><p>BATCH_JOB_EXECUTION_PARAMS：</p><table><thead><tr><th style="text-align:left;">JOB_INST_ID</th><th style="text-align:left;">TYPE_CD</th><th style="text-align:left;">KEY_NAME</th><th style="text-align:left;">DATE_VAL</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">DATE</td><td style="text-align:left;">schedule.Date</td><td style="text-align:left;">2019-01-01</td></tr></tbody></table><p>ATCH_JOB_EXECUTION：</p><table><thead><tr><th style="text-align:left;">JOB_EXEC_ID</th><th style="text-align:left;">JOB_INST_ID</th><th style="text-align:left;">START_TIME</th><th style="text-align:left;">END_TIME</th><th style="text-align:left;">STATUS</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">1</td><td style="text-align:left;">2017-01-01 21:00</td><td style="text-align:left;">2017-01-01 21:30</td><td style="text-align:left;">FAILED</td></tr></tbody></table><p>BATCH_STEP_EXECUTION：</p><table><thead><tr><th style="text-align:left;">STEP_EXEC_ID</th><th style="text-align:left;">JOB_EXEC_ID</th><th style="text-align:left;">STEP_NAME</th><th style="text-align:left;">START_TIME</th><th style="text-align:left;">END_TIME</th><th style="text-align:left;">STATUS</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">1</td><td style="text-align:left;">loadData</td><td style="text-align:left;">2017-01-01 21:00</td><td style="text-align:left;">2017-01-01 21:30</td><td style="text-align:left;"></td></tr></tbody></table><p>BATCH_STEP_EXECUTION_CONTEXT：</p><table><thead><tr><th style="text-align:left;">STEP_EXEC_ID</th><th style="text-align:left;">SHORT_CONTEXT</th></tr></thead><tbody><tr><td style="text-align:left;">1</td><td style="text-align:left;">{piece.count=40321}</td></tr></tbody></table><p>​ 在上面的例子中，<code>Step</code> 运行30分钟处理了40321个“pieces”，我们姑且认为“pieces”表示行间的行数（实际就是每个Step完成循环处理的个数）。这个值会在每个<code>commit</code>之前被更新记录在<code>ExecutionContext</code>中（更新需要用到<code>StepListener</code>后文会详细说明）。当我们再次重启这个<code>Job</code>时并记录在<em>BATCH_STEP_EXECUTION_CONTEXT</em>中的数据会加载到<code>ExecutionContext</code>中,这样当我们继续执行批处理任务时可以从上一次中断的位置继续处理。例如下面的代码在<code>ItemReader</code>中检查上次执行的结果，并从中断的位置继续执行：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">if</span> <span class="token punctuation">(</span>executionContext<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token constant">LINES_READ_COUNT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;Initializing for restart. Restart data is: &quot;</span> <span class="token operator">+</span> executionContext<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">long</span> lineCount <span class="token operator">=</span> executionContext<span class="token punctuation">.</span><span class="token function">getLong</span><span class="token punctuation">(</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token constant">LINES_READ_COUNT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">LineReader</span> reader <span class="token operator">=</span> <span class="token function">getReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Object</span> record <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>reader<span class="token punctuation">.</span><span class="token function">getPosition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> lineCount <span class="token operator">&amp;&amp;</span> <span class="token keyword">record</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        record <span class="token operator">=</span> <span class="token function">readLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ExecutionContext</code>是根据<code>JobInstance</code>进行管理的，因此只要是相同的实例都会具备相同的ExecutionContext（无论是否停止）。此外通过以下方法都可以获得一个<code>ExecutionContext</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ExecutionContext</span> ecStep <span class="token operator">=</span> stepExecution<span class="token punctuation">.</span><span class="token function">getExecutionContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">ExecutionContext</span> ecJob <span class="token operator">=</span> jobExecution<span class="token punctuation">.</span><span class="token function">getExecutionContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>但是这2个<code>ExecutionContext</code>并不相同，前者是在一个<code>Step</code>中每次<code>Commit</code>数据之间共享，后者是在<code>Step</code>与<code>Step</code>之间共享。</p><h4 id="jobrepository" tabindex="-1"><a class="header-anchor" href="#jobrepository" aria-hidden="true">#</a> JobRepository</h4><p>​ <code>JobRepository</code>是所有前面介绍的对象实例的持久化机制。他为<code>JobLauncher</code>、<code>Job</code>、<code>Step</code>的实现提供了CRUD操作。当一个<code>Job</code>第一次被启动时，一个<code>JobExecution</code>会从数据源中获取到，同时在执行的过程中<code>StepExecution</code>、<code>JobExecution</code>的实现都会记录到数据源中。挡在程序启动时使用<code>@EnableBatchProcessing</code>注解，<code>JobRepository</code>会进行自动化配置。</p><h4 id="joblauncher" tabindex="-1"><a class="header-anchor" href="#joblauncher" aria-hidden="true">#</a> JobLauncher</h4><p><code>JobLauncher</code>为<code>Job</code>的启动运行提供了一个边界的入口，在启动<code>Job</code>的同时还可以定制<code>JobParameters</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">JobLauncher</span> <span class="token punctuation">{</span>
	<span class="token keyword">public</span> <span class="token class-name">JobExecution</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">Job</span> job<span class="token punctuation">,</span> <span class="token class-name">JobParameters</span> jobParameters<span class="token punctuation">)</span>
				<span class="token keyword">throws</span> <span class="token class-name">JobExecutionAlreadyRunningException</span><span class="token punctuation">,</span> <span class="token class-name">JobRestartException</span><span class="token punctuation">,</span><span class="token class-name">JobInstanceAlreadyCompleteException</span><span class="token punctuation">,</span><span class="token class-name">JobParametersInvalidException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>![cm9c3yeke6](img\\Spring Batch\\cm9c3yeke6.png)</p>`,96),g={id:"spring-batch——step控制",tabindex:"-1"},y=s("a",{class:"header-anchor",href:"#spring-batch——step控制","aria-hidden":"true"},"#",-1),E={id:"spring-batch——job配置与运行",tabindex:"-1"},f=s("a",{class:"header-anchor",href:"#spring-batch——job配置与运行","aria-hidden":"true"},"#",-1),T=e(`<h2 id="spring-batch——item概念及使用代码" tabindex="-1"><a class="header-anchor" href="#spring-batch——item概念及使用代码" aria-hidden="true">#</a> Spring Batch——Item概念及使用代码</h2><p>在上文中介绍一个标准的批处理分为 <code>Job</code> 和 <code>Step</code> 。本文将结合代码介绍在<code>Step</code>中<code>Reader</code>、<code>Processor</code>、<code>Writer</code>的实际使用。</p><h3 id="reader" tabindex="-1"><a class="header-anchor" href="#reader" aria-hidden="true">#</a> Reader</h3><p><code>Reader</code>是指从各种各样的外部输入中获取数据，框架为获取各种类型的文件已经预定义了常规的<code>Reader</code>实现类。<code>Reader</code>通过<code>ItemReader</code>接口实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ItemReader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">T</span> <span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">,</span> <span class="token class-name">UnexpectedInputException</span><span class="token punctuation">,</span> <span class="token class-name">ParseException</span><span class="token punctuation">,</span> <span class="token class-name">NonTransientResourceException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>read</code>方法的作用就是读取一条数据，数据以泛型T的实体结构返回，<strong>当read返回null时表示所有数据读取完毕</strong>。返回的数据可以是任何结构，比如文件中的一行字符串，数据库的一行数据，或者xml文件中的一系列元素，只要是一个Java对象即可。</p><h3 id="writer" tabindex="-1"><a class="header-anchor" href="#writer" aria-hidden="true">#</a> Writer</h3><p><code>Writer</code>通过<code>ItemWriter</code>接口实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ItemWriter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> items<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Writer</code>是<code>Reader</code>的反向操作，是将数据写入到特定的数据源中。在上文已经介绍<code>Writer</code>是根据<code>chunk</code>属性设定的值按列表进行操作的，所以传入的是一个<code>List</code>结构。<code>chunk</code>用于表示批处理的事物分片，因此需要注意的是，在<code>writer</code>方法中进行完整数据写入事物操作。例如向数据库写入<code>List</code>中的数据，在写入完成之后再提交事物。</p><h3 id="读写的组合模式" tabindex="-1"><a class="header-anchor" href="#读写的组合模式" aria-hidden="true">#</a> 读写的组合模式</h3><p>无论是读还是写，有时会需要从多个不同的来源获取文件，或者写入到不同的数据源，或者是需要在读和写之间处理一些业务。可以使用组合模式来实现这个目的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompositeItemWriter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">ItemWriter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">ItemWriter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> itemWriter<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token class-name">CompositeItemWriter</span><span class="token punctuation">(</span><span class="token class-name">ItemWriter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> itemWriter<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>itemWriter <span class="token operator">=</span> itemWriter<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> items<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token comment">//Add business logic here</span>
       itemWriter<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDelegate</span><span class="token punctuation">(</span><span class="token class-name">ItemWriter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> itemWriter<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>itemWriter <span class="token operator">=</span> itemWriter<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="processor" tabindex="-1"><a class="header-anchor" href="#processor" aria-hidden="true">#</a> Processor</h3><p>除了使用组合模式，直接使用<code>Processor</code>是一种更优雅的方法。<code>Processor</code>是<code>Step</code>中的可选项，但是批处理大部分时候都需要对数据进行处理，因此框架提供了<code>ItemProcessor</code>接口来满足 <code>Processor</code> 过程：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ItemProcessor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span> <span class="token class-name">O</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">O</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">I</span> item<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>Processor</code>的结构非常简单也是否易于理解。传入一个类型<code>&lt;I&gt;</code>，然后由<code>Processor</code>处理成为<code>&lt;O&gt;</code>。</p><h4 id="processor链" tabindex="-1"><a class="header-anchor" href="#processor链" aria-hidden="true">#</a> Processor链</h4><p>在一个Step中可以使用多个<code>Processor</code>来按照顺序处理业务，此时同样可以使用<code>CompositeItem</code>模式来实现：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">CompositeItemProcessor</span> <span class="token function">compositeProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//创建 CompositeItemProcessor</span>
    <span class="token class-name">CompositeItemProcessor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span><span class="token punctuation">,</span><span class="token class-name">Foobar</span><span class="token punctuation">&gt;</span></span> compositeProcessor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompositeItemProcessor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Foo</span><span class="token punctuation">,</span><span class="token class-name">Foobar</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span> itemProcessors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//添加第一个 Processor</span>
    itemProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FooTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//添加第二个 Processor</span>
    itemProcessors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BarTransformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//添加链表</span>
    compositeProcessor<span class="token punctuation">.</span><span class="token function">setDelegates</span><span class="token punctuation">(</span>itemProcessors<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> processor<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="过滤记录" tabindex="-1"><a class="header-anchor" href="#过滤记录" aria-hidden="true">#</a> 过滤记录</h4><p>​ 在<code>Reader</code>读取数据的过程中，并不是所有的数据都可以使用，此时<code>Processor</code>还可以用于过滤非必要的数据，同时不会影响<code>Step</code>的处理过程。只要<code>ItemProcesspr</code>的实现类在<code>procss</code>方法中返回<code>null</code>即表示改行数据被过滤掉了。</p><h3 id="itemstream" tabindex="-1"><a class="header-anchor" href="#itemstream" aria-hidden="true">#</a> ItemStream</h3><p>​ 在上文中已经提到了<code>ItemStream</code>。Spring Batch的每一步都是无状态的，进而<code>Reader</code>和<code>Writer</code>也是无状态的，这种方式能够很好的隔离每行数据的处理，也能将容错的范围收窄到可以空子的范围。但是这并不意味着整个批处理的过程中并不需要控制状态。例如从数据库持续读入或写入数据，每次<code>Reader</code>和<code>Writer</code>都单独去申请数据源的链接、维护数据源的状态（打开、关闭等）。因此框架提供了<code>ItemStream</code>接口来完善这些操作：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ItemStream</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token class-name">ExecutionContext</span> executionContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ItemStreamException</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">ExecutionContext</span> executionContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ItemStreamException</span><span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ItemStreamException</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="持久化数据" tabindex="-1"><a class="header-anchor" href="#持久化数据" aria-hidden="true">#</a> 持久化数据</h3><p>​ 在使用Spring Batch之前需要初始化他的元数据存储（Meta-Data Schema）,也就是要将需要用到的表导入到对应的数据库中。当然，Spring Batch支持不使用任何持久化数据库，仅仅将数据放到内存中，不设置<code>DataSource</code>即可。</p><h4 id="初始化序列" tabindex="-1"><a class="header-anchor" href="#初始化序列" aria-hidden="true">#</a> 初始化序列</h4><p>Spring Batch相关的工作需要使用序列<code>SEQUENCE</code>：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> SEQUENCE BATCH_STEP_EXECUTION_SEQ<span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> SEQUENCE BATCH_JOB_EXECUTION_SEQ<span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> SEQUENCE BATCH_JOB_SEQ<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有些数据库不支持<code>SEQUENCE</code>，可以通过表代理，比如在MySql（InnoDB数据库）中：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> BATCH_STEP_EXECUTION_SEQ <span class="token punctuation">(</span>ID <span class="token keyword">BIGINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> BATCH_STEP_EXECUTION_SEQ <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> BATCH_JOB_EXECUTION_SEQ <span class="token punctuation">(</span>ID <span class="token keyword">BIGINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> BATCH_JOB_EXECUTION_SEQ <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> BATCH_JOB_SEQ <span class="token punctuation">(</span>ID <span class="token keyword">BIGINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> BATCH_JOB_SEQ <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="关于version字段" tabindex="-1"><a class="header-anchor" href="#关于version字段" aria-hidden="true">#</a> 关于Version字段</h4><p>某些表中都有<code>Version</code>字段。因为Spring的更新策略是乐观锁，因此在进行数据更新之后都会对表的<code>Version</code>字段进行+1处理。在内存与数据库交互的过程中，会使用采用<em>getVersion</em>、<em>increaseVersion（+1）</em>、<em>updateDataAndVersion</em>的过程，如果在<code>update</code>的时候发现Version不是预计的数值（+1），则会抛出<code>OptimisticLockingFailureException</code>的异常。当同一个<code>Job</code>在进群中不同服务上执行时，需要注意这个问题。</p><h4 id="batch-job-instance" tabindex="-1"><a class="header-anchor" href="#batch-job-instance" aria-hidden="true">#</a> BATCH_JOB_INSTANCE</h4>`,35),x=s("code",null,"BATCH_JOB_INSTANCE",-1),S={href:"https://www.chkui.com/article/spring/spring_batch_introduction",target:"_blank",rel:"noopener noreferrer"},_=e(`<div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> BATCH_JOB_INSTANCE  <span class="token punctuation">(</span>
  JOB_INSTANCE_ID <span class="token keyword">BIGINT</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">,</span>
  VERSION <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>
  JOB_NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>
  JOB_KEY <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">2500</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>JOB_INSTANCE_ID</td><td>主键，主键与单个JobInstance相关。当获取到某个JobInstance实例后，通过getId方法可以获取到此数据</td></tr><tr><td>VERSION</td><td></td></tr><tr><td>JOB_NAME</td><td>Job的名称，用于标记运行的Job，在创建Job时候指定</td></tr><tr><td>JOB_KEY</td><td>JobParameters的序列化数值。在数据批处理概念中介绍了一个JobInstance相当于Job+JobParameters。他用于标记同一个Job不同的实例</td></tr></tbody></table><h4 id="batch-job-execution-params" tabindex="-1"><a class="header-anchor" href="#batch-job-execution-params" aria-hidden="true">#</a> BATCH_JOB_EXECUTION_PARAMS</h4><p><code>BATCH_JOB_EXECUTION_PARAMS</code>对应的是<code>JobParameters</code>对象。其核心功能是存储<em>Key-Value</em>结构的各种状态数值。字段中<code>IDENTIFYING=true</code>用于标记那些运行过程中必须的数据（可以理解是框架需要用到的数据），为了存储<em>key-value</em>结构该表一个列数据格式：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> BATCH_JOB_EXECUTION_PARAMS  <span class="token punctuation">(</span>
	JOB_EXECUTION_ID <span class="token keyword">BIGINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>
	TYPE_CD <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>
	KEY_NAME <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>
	STRING_VAL <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">250</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>
	DATE_VAL <span class="token keyword">DATETIME</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>
	LONG_VAL <span class="token keyword">BIGINT</span> <span class="token punctuation">,</span>
	DOUBLE_VAL <span class="token keyword">DOUBLE</span> <span class="token keyword">PRECISION</span> <span class="token punctuation">,</span>
	IDENTIFYING <span class="token keyword">CHAR</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token punctuation">,</span>
	<span class="token keyword">constraint</span> JOB_EXEC_PARAMS_FK <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>JOB_EXECUTION_ID<span class="token punctuation">)</span>
	<span class="token keyword">references</span> BATCH_JOB_EXECUTION<span class="token punctuation">(</span>JOB_EXECUTION_ID<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>JOB_EXECUTION_ID</td><td>与BATCH_JOB_EXECUTION表关联的外键，详见数据批处理概念中Job、JobInstance、JobExecute的关系</td></tr><tr><td>TYPE_CD</td><td>用于标记数据的对象类型，例如 string、date、long、double，非空</td></tr><tr><td>KEY_NAME</td><td>key的值</td></tr><tr><td>STRING_VAL</td><td>string类型的数值</td></tr><tr><td>DATE_VAL</td><td>date类型的数值</td></tr><tr><td>LONG_VAL</td><td>long类型的数值</td></tr><tr><td>DOUBLE_VAL</td><td>double类型的数值</td></tr><tr><td>IDENTIFYING</td><td>标记这对key-valuse是否来自于JobInstace自身</td></tr></tbody></table><h4 id="batch-job-execution" tabindex="-1"><a class="header-anchor" href="#batch-job-execution" aria-hidden="true">#</a> BATCH_JOB_EXECUTION</h4><p>关联<code>JobExecution</code>，每当运行一个<code>Job</code>都会产生一个新的<code>JobExecution</code>，对应的在表中都会新增一行数据。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> BATCH_JOB_EXECUTION  <span class="token punctuation">(</span>
  JOB_EXECUTION_ID <span class="token keyword">BIGINT</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">,</span>
  VERSION <span class="token keyword">BIGINT</span><span class="token punctuation">,</span>
  JOB_INSTANCE_ID <span class="token keyword">BIGINT</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  CREATE_TIME <span class="token keyword">TIMESTAMP</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  START_TIME <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  END_TIME <span class="token keyword">TIMESTAMP</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token keyword">STATUS</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  EXIT_CODE <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  EXIT_MESSAGE <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">2500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  LAST_UPDATED <span class="token keyword">TIMESTAMP</span><span class="token punctuation">,</span>
  JOB_CONFIGURATION_LOCATION <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">2500</span><span class="token punctuation">)</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>
  <span class="token keyword">constraint</span> JOB_INSTANCE_EXECUTION_FK <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token punctuation">(</span>JOB_INSTANCE_ID<span class="token punctuation">)</span>
  <span class="token keyword">references</span> BATCH_JOB_INSTANCE<span class="token punctuation">(</span>JOB_INSTANCE_ID<span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:left;">字段</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">JOB_EXECUTION_ID</td><td style="text-align:left;">JobExecution的主键，JobExecution::getId方法可以获取到该值</td></tr><tr><td style="text-align:left;">VERSION</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">JOB_INSTANCE_ID</td><td style="text-align:left;">关联到JobInstace的外键，详见数据批处理概念中Job、JobInstance、JobExecute的关系</td></tr><tr><td style="text-align:left;">CREATE_TIME</td><td style="text-align:left;">创建时间戳</td></tr><tr><td style="text-align:left;">START_TIME</td><td style="text-align:left;">开始时间戳</td></tr><tr><td style="text-align:left;">END_TIME</td><td style="text-align:left;">结束时间戳，无论成功或失败都会更新这一项数据。如果某行数据该值为空表示运行期间出现错误，并且框架无法更新该值</td></tr><tr><td style="text-align:left;">STATUS</td><td style="text-align:left;">JobExecute的运行状态:COMPLETED、STARTED或者其他状态。此数值对应Java中BatchStatus枚举值</td></tr><tr><td style="text-align:left;">EXIT_CODE</td><td style="text-align:left;">JobExecute执行完毕之后的退出返回值</td></tr><tr><td style="text-align:left;">EXIT_MESSAGE</td><td style="text-align:left;">JobExecute退出的详细内容，如果是异常退出可能会包括异常堆栈的内容</td></tr><tr><td style="text-align:left;">LAST_UPDATED</td><td style="text-align:left;">最后一次更新的时间戳</td></tr></tbody></table><h4 id="batch-step-execution" tabindex="-1"><a class="header-anchor" href="#batch-step-execution" aria-hidden="true">#</a> BATCH_STEP_EXECUTION</h4><p>该表对应的是<code>StepExecution</code>，其结构和<code>BATCH_JOB_EXECUTION</code>基本相似，只是对应的对象是<code>Step</code>，增加了与之相对的一些字段数值：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token constant">BATCH_STEP_EXECUTION</span>  <span class="token punctuation">(</span>
  <span class="token constant">STEP_EXECUTION_ID</span> <span class="token constant">BIGINT</span>  <span class="token constant">PRIMARY</span> <span class="token constant">KEY</span> <span class="token punctuation">,</span>
  <span class="token constant">VERSION</span> <span class="token constant">BIGINT</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
  <span class="token constant">STEP_NAME</span> <span class="token constant">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
  <span class="token constant">JOB_EXECUTION_ID</span> <span class="token constant">BIGINT</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
  <span class="token constant">START_TIME</span> <span class="token constant">TIMESTAMP</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span> <span class="token punctuation">,</span>
  <span class="token constant">END_TIME</span> <span class="token constant">TIMESTAMP</span> <span class="token constant">DEFAULT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
  <span class="token constant">STATUS</span> <span class="token constant">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token constant">COMMIT_COUNT</span> <span class="token constant">BIGINT</span> <span class="token punctuation">,</span>
  <span class="token constant">READ_COUNT</span> <span class="token constant">BIGINT</span> <span class="token punctuation">,</span>
  <span class="token constant">FILTER_COUNT</span> <span class="token constant">BIGINT</span> <span class="token punctuation">,</span>
  <span class="token constant">WRITE_COUNT</span> <span class="token constant">BIGINT</span> <span class="token punctuation">,</span>
  <span class="token constant">READ_SKIP_COUNT</span> <span class="token constant">BIGINT</span> <span class="token punctuation">,</span>
  <span class="token constant">WRITE_SKIP_COUNT</span> <span class="token constant">BIGINT</span> <span class="token punctuation">,</span>
  <span class="token constant">PROCESS_SKIP_COUNT</span> <span class="token constant">BIGINT</span> <span class="token punctuation">,</span>
  <span class="token constant">ROLLBACK_COUNT</span> <span class="token constant">BIGINT</span> <span class="token punctuation">,</span>
  <span class="token constant">EXIT_CODE</span> <span class="token constant">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>
  <span class="token constant">EXIT_MESSAGE</span> <span class="token constant">VARCHAR</span><span class="token punctuation">(</span><span class="token number">2500</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>
  <span class="token constant">LAST_UPDATED</span> <span class="token constant">TIMESTAMP</span><span class="token punctuation">,</span>
  constraint <span class="token constant">JOB_EXECUTION_STEP_FK</span> foreign <span class="token function">key</span> <span class="token punctuation">(</span><span class="token constant">JOB_EXECUTION_ID</span><span class="token punctuation">)</span>
  references <span class="token constant">BATCH_JOB_EXECUTION</span><span class="token punctuation">(</span><span class="token constant">JOB_EXECUTION_ID</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>未填入内容部分见<code>BATCH_JOB_EXECUTION</code>说明。</p><table><thead><tr><th style="text-align:left;">字段</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">STEP_EXECUTION_ID</td><td style="text-align:left;">StepExecute对应的主键</td></tr><tr><td style="text-align:left;">VERSION</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">STEP_NAME</td><td style="text-align:left;">Step名称</td></tr><tr><td style="text-align:left;">JOB_EXECUTION_ID</td><td style="text-align:left;">关联到BATCH_JOB_EXECUTION表的外键，标记该StepExecute所属的JobExecute</td></tr><tr><td style="text-align:left;">START_TIME</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">END_TIME</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">STATUS</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">COMMIT_COUNT</td><td style="text-align:left;">执行过程中，事物提交的次数，该值与数据的规模以及chunk的设置有关</td></tr><tr><td style="text-align:left;">READ_COUNT</td><td style="text-align:left;">读取数据的次数</td></tr><tr><td style="text-align:left;">FILTER_COUNT</td><td style="text-align:left;">Processor中过滤记录的次数</td></tr><tr><td style="text-align:left;">WRITE_COUNT</td><td style="text-align:left;">吸入数据的次数</td></tr><tr><td style="text-align:left;">READ_SKIP_COUNT</td><td style="text-align:left;">读数据的跳过次数</td></tr><tr><td style="text-align:left;">WRITE_SKIP_COUNT</td><td style="text-align:left;">写数据的跳过次数</td></tr><tr><td style="text-align:left;">PROCESS_SKIP_COUNT</td><td style="text-align:left;">Processor跳过的次数</td></tr><tr><td style="text-align:left;">ROLLBACK_COUNT</td><td style="text-align:left;">回滚的次数</td></tr><tr><td style="text-align:left;">EXIT_CODE</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">EXIT_MESSAGE</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">LAST_UPDATED</td><td style="text-align:left;"></td></tr></tbody></table><h4 id="batch-job-execution-context" tabindex="-1"><a class="header-anchor" href="#batch-job-execution-context" aria-hidden="true">#</a> BATCH_JOB_EXECUTION_CONTEXT</h4><p>该表会记录所有与<code>Job</code>相关的<code>ExecutionContext</code>信息。每个<code>ExecutionContext</code>都对应一个<code>JobExecution</code>，在运行的过程中它包含了所有<code>Job</code>范畴的状态数据，这些数据在执行失败后对于后续处理有中重大意义。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token constant">CREATE</span> <span class="token constant">TABLE</span> <span class="token constant">BATCH_JOB_EXECUTION_CONTEXT</span>  <span class="token punctuation">(</span>
  <span class="token constant">JOB_EXECUTION_ID</span> <span class="token constant">BIGINT</span> <span class="token constant">PRIMARY</span> <span class="token constant">KEY</span><span class="token punctuation">,</span>
  <span class="token constant">SHORT_CONTEXT</span> <span class="token constant">VARCHAR</span><span class="token punctuation">(</span><span class="token number">2500</span><span class="token punctuation">)</span> <span class="token constant">NOT</span> <span class="token constant">NULL</span><span class="token punctuation">,</span>
  <span class="token constant">SERIALIZED_CONTEXT</span> <span class="token constant">CLOB</span><span class="token punctuation">,</span>
  constraint <span class="token constant">JOB_EXEC_CTX_FK</span> foreign <span class="token function">key</span> <span class="token punctuation">(</span><span class="token constant">JOB_EXECUTION_ID</span><span class="token punctuation">)</span>
  references <span class="token constant">BATCH_JOB_EXECUTION</span><span class="token punctuation">(</span><span class="token constant">JOB_EXECUTION_ID</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th style="text-align:left;">字段</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">JOB_EXECUTION_ID</td><td style="text-align:left;">关联到JobExecution的外键，建立JobExecution和ExecutionContext的关系。</td></tr><tr><td style="text-align:left;">SHORT_CONTEXT</td><td style="text-align:left;">标记SERIALIZED_CONTEXT的版本号</td></tr><tr><td style="text-align:left;">SERIALIZED_CONTEXT</td><td style="text-align:left;">序列化的ExecutionContext</td></tr></tbody></table><h4 id="batch-step-execution-context" tabindex="-1"><a class="header-anchor" href="#batch-step-execution-context" aria-hidden="true">#</a> BATCH_STEP_EXECUTION_CONTEXT</h4><p><code>Step</code>中<code>ExecutionContext</code>相关的数据表，结构与<code>BATCH_JOB_EXECUTION_CONTEXT</code>完全一样。</p><h4 id="表索引建议" tabindex="-1"><a class="header-anchor" href="#表索引建议" aria-hidden="true">#</a> 表索引建议</h4><p>上面的所有建表语句都没有提供索引，但是并不代表索引没有价值。当感觉到SQL语句的执行有效率问题时候，可以增加索引。</p><p>索引带来的价值取决于SQL查询的频率以及关联关系，下面是Spring Batch框架在运行过程中会用到的一些查询条件语句，用于参考优化索引：</p><table><thead><tr><th style="text-align:left;">表</th><th style="text-align:left;">Where条件</th><th style="text-align:left;">执行频率</th></tr></thead><tbody><tr><td style="text-align:left;">BATCH_JOB_INSTANCE</td><td style="text-align:left;">JOB_NAME = ? and JOB_KEY = ?</td><td style="text-align:left;">每次Job启动执时</td></tr><tr><td style="text-align:left;">BATCH_JOB_EXECUTION</td><td style="text-align:left;">JOB_INSTANCE_ID = ?</td><td style="text-align:left;">每次Job重启时</td></tr><tr><td style="text-align:left;">BATCH_EXECUTION_CONTEXT</td><td style="text-align:left;">EXECUTION_ID = ? and KEY_NAME = ?</td><td style="text-align:left;">视chunk的大小而定</td></tr><tr><td style="text-align:left;">BATCH_STEP_EXECUTION</td><td style="text-align:left;">VERSION = ?</td><td style="text-align:left;">视chunk的大小而定</td></tr><tr><td style="text-align:left;">BATCH_STEP_EXECUTION</td><td style="text-align:left;">STEP_NAME = ? and JOB_EXECUTION_ID = ?</td><td style="text-align:left;">每一个Step执行之前</td></tr></tbody></table><h2 id="spring-batch——文件读写" tabindex="-1"><a class="header-anchor" href="#spring-batch——文件读写" aria-hidden="true">#</a> Spring Batch——文件读写</h2>`,26),w={href:"https://www.chkui.com/article/spring/spring_batch_job",target:"_blank",rel:"noopener noreferrer"},I={href:"https://www.chkui.com/article/spring/spring_batch_step",target:"_blank",rel:"noopener noreferrer"},C={href:"https://www.chkui.com/article/spring/spring_batch_item_and_code_case",target:"_blank",rel:"noopener noreferrer"},N=s("code",null,"Reader",-1),A=s("code",null,"Processor",-1),R=s("code",null,"Writer",-1),O=e('<h3 id="扁平结构文件" tabindex="-1"><a class="header-anchor" href="#扁平结构文件" aria-hidden="true">#</a> 扁平结构文件</h3><p><strong>扁平结构文件</strong>（也称为矩阵结构文件，后文简称为文件）是最常见的一种文件类型。他通常以一行表示一条记录，字段数据之间用某种方式分割。与标准的格式数据（xml、json等）主要差别在于他没有结构性描述方案（SXD、JSON-SCHEME），进而没有结构性分割规范。因此在读写此类文件之前需要先设定好字段的分割方法。</p><p>文件的字段数据分割方式通常有两种：<strong>使用分隔符</strong>或<strong>固定字段长度</strong>。前者通常使用逗号（<code>，</code>）之类的符号对字段数据进行划分，后者的每一列字段数据长度是固定的。 框架为文件的读取提供了<code>FieldSet</code>用于将文件结构中的信息映射到一个对象。<code>FieldSet</code>的作用是将文件的数据与类的<code>field</code>进行绑定（field是Java中常见的概念，不清楚的可以了解Java反射）。</p><h3 id="数据读取" tabindex="-1"><a class="header-anchor" href="#数据读取" aria-hidden="true">#</a> 数据读取</h3>',4),B=s("code",null,"FlatFileItemReader",-1),J=s("code",null,"FlatFileItemReader",-1),L=s("code",null,"Resource",-1),M=s("code",null,"LineMapper",-1),D=s("code",null,"Resource",-1),P={href:"https://www.chkui.com/article/spring/spring_core_resources_management",target:"_blank",rel:"noopener noreferrer"},F=e(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Resource</span> resource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span><span class="token string">&quot;resources/trades.csv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在复杂的生产环境中，文件通常由中心化、或者流程式的基础框架来管理（比如EAI）。因此文件往往需要使用FTP等方式从其他位置获取。如何迁移文件已经超出了Spring Batch框架的范围，在Spring的体系中可以参考<code>Spring Integration</code>项目。</p><p>下面是<code>FlatFileItemReader</code>的属性，每一个属性都提供了Setter方法。</p><table><thead><tr><th style="text-align:left;">属性名</th><th style="text-align:left;">参数类型</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">comments</td><td style="text-align:left;">String[]</td><td style="text-align:left;">指定文件中的注释前缀，用于过滤注释内容行</td></tr><tr><td style="text-align:left;">encoding</td><td style="text-align:left;">String</td><td style="text-align:left;">指定文件的编码方式，默认为Charset.defaultCharset()</td></tr><tr><td style="text-align:left;">lineMapper</td><td style="text-align:left;">LineMapper</td><td style="text-align:left;">利用LineMapper接口将一行字符串转换为对象</td></tr><tr><td style="text-align:left;">linesToSkip</td><td style="text-align:left;">int</td><td style="text-align:left;">跳过文件开始位置的行数，用于跳过一些字段的描述行</td></tr><tr><td style="text-align:left;">recordSeparatorPolicy</td><td style="text-align:left;">RecordSeparatorPolicy</td><td style="text-align:left;">用于判断数据是否结束</td></tr><tr><td style="text-align:left;">resource</td><td style="text-align:left;">Resource</td><td style="text-align:left;">指定外部资源文件位置</td></tr><tr><td style="text-align:left;">skippedLinesCallback</td><td style="text-align:left;">LineCallbackHandler</td><td style="text-align:left;">当配置linesToSkip，每执行一次跳过都会被回调一次，会传入跳过的行数据内容</td></tr></tbody></table><p>每个属性都为文件的解析提供了某方面的功能，下面是结构的说明。</p><h4 id="linemapper" tabindex="-1"><a class="header-anchor" href="#linemapper" aria-hidden="true">#</a> LineMapper</h4><p>这个接口的作用是将字符串转换为对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LineMapper</span> <span class="token punctuation">{</span> 
    <span class="token class-name">T</span> <span class="token function">mapLine</span><span class="token punctuation">(</span><span class="token class-name">String</span> line<span class="token punctuation">,</span> <span class="token keyword">int</span> lineNumber<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接口的基本处理逻辑是聚合类（<code>FlatFileItemReader</code>）传递一行字符串以及行号给<code>LineMapper::mapLine</code>，方法处理后返回一个映射的对象。</p><h4 id="linetokenizer" tabindex="-1"><a class="header-anchor" href="#linetokenizer" aria-hidden="true">#</a> LineTokenizer</h4><p>这个接口的作用是将一行数据转换为一个<code>FieldSet</code>结构。对于Spring Batch而言，扁平结构文件的到Java实体的映射都通过<code>FieldSet</code>来控制，因此读写文件的过程需要完成字符串到<code>FieldSet</code>的转换：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LineTokenizer</span> <span class="token punctuation">{</span> 
    <span class="token class-name">FieldSet</span> <span class="token function">tokenize</span><span class="token punctuation">(</span><span class="token class-name">String</span> line<span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个接口的含义是：传递一行字符串数据，然后获取一个<code>FieldSet</code>。</p><p>框架为<code>LineTokenizer</code>提供三个实现类：</p><ul><li><code>DelimitedLineTokenizer</code>：利用分隔符将数据转换为<code>FieldSet</code>。最常见的分隔符是逗号<code>,</code>，类提供了分隔符的配置和解析方法。</li><li><code>FixedLengthTokenizer</code>：根据字段的长度来解析出<code>FieldSet</code>结构。必须为记录定义字段宽度。</li><li><code>PatternMatchingCompositeLineTokenizer</code>：使用一个匹配机制来动态决定使用哪个<code>LineTokenizer</code>。</li></ul><h4 id="fieldsetmapper" tabindex="-1"><a class="header-anchor" href="#fieldsetmapper" aria-hidden="true">#</a> FieldSetMapper</h4><p>该接口是将<code>FieldSet</code>转换为对象：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FieldSetMapper</span> <span class="token punctuation">{</span> 
    <span class="token class-name">T</span> <span class="token function">mapFieldSet</span><span class="token punctuation">(</span><span class="token class-name">FieldSet</span> fieldSet<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BindException</span><span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>FieldSetMapper</code>通常和<code>LineTokenizer</code>联合在一起使用：<em>String-&gt;FieldSet-&gt;Object</em>。</p><h4 id="defaultlinemapper" tabindex="-1"><a class="header-anchor" href="#defaultlinemapper" aria-hidden="true">#</a> DefaultLineMapper</h4><p><code>DefaultLineMapper</code>是<code>LineMapper</code>的实现，他实现了从文件到Java实体的映射：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultLineMapper</span> <span class="token keyword">implements</span> <span class="token class-name">LineMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">,</span> <span class="token class-name">InitializingBean</span> <span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token class-name">LineTokenizer</span> tokenizer<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name">FieldSetMapper</span> fieldSetMapper<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">mapLine</span><span class="token punctuation">(</span><span class="token class-name">String</span> line<span class="token punctuation">,</span> <span class="token keyword">int</span> lineNumber<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
		<span class="token keyword">return</span> fieldSetMapper<span class="token punctuation">.</span><span class="token function">mapFieldSet</span><span class="token punctuation">(</span>tokenizer<span class="token punctuation">.</span><span class="token function">tokenize</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLineTokenizer</span><span class="token punctuation">(</span><span class="token class-name">LineTokenizer</span> tokenizer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>tokenizer <span class="token operator">=</span> tokenizer<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setFieldSetMapper</span><span class="token punctuation">(</span><span class="token class-name">FieldSetMapper</span> fieldSetMapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span>fieldSetMapper <span class="token operator">=</span> fieldSetMapper<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在解析文件时数据是按行解析的：</p><ol><li>传入一行字符串。</li><li><code>LineTokenizer</code>将字符串解析为<code>FieldSet</code>结构。</li><li><code>FieldSetMapper</code>继续解析为一个Java实体对象返回给调用者。</li></ol><p><code>DefaultLineMapper</code>是框架提供的默认实现类，看似非常简单，但是利用组合模式可以扩展出很多功能。</p><h4 id="数据自动映射" tabindex="-1"><a class="header-anchor" href="#数据自动映射" aria-hidden="true">#</a> 数据自动映射</h4><p>在转换过程中如果将<code>FieldSet</code>的<code>names</code>属性与目标类的<code>field</code>绑定在一起，那么可以直接使用反射实现数据转换，为此框架提供了<code>BeanWrapperFieldSetMapper</code>来实现。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">DefaultLineMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WeatherEntity</span><span class="token punctuation">&gt;</span></span> lineMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultLineMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建LineMapper</span>

<span class="token class-name">DelimitedLineTokenizer</span> tokenizer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelimitedLineTokenizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//创建LineTokenizer</span>
tokenizer<span class="token punctuation">.</span><span class="token function">setNames</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;siteId&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;month&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ext&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置Field名称</span>

 <span class="token comment">//创建FieldSetMapper</span>
<span class="token class-name">BeanWrapperFieldSetMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WeatherEntity</span><span class="token punctuation">&gt;</span></span> wrapperMapper 
	<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanWrapperFieldSetMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token comment">//设置实体，实体的field名称必须和tokenizer.names一致。</span>
wrapperMapper<span class="token punctuation">.</span><span class="token function">setTargetType</span><span class="token punctuation">(</span><span class="token class-name">WeatherEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 组合lineMapper</span>
lineMapper<span class="token punctuation">.</span><span class="token function">setLineTokenizer</span><span class="token punctuation">(</span>tokenizer<span class="token punctuation">)</span><span class="token punctuation">;</span>
lineMapper<span class="token punctuation">.</span><span class="token function">setFieldSetMapper</span><span class="token punctuation">(</span>wrapperMapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="文件读取总结" tabindex="-1"><a class="header-anchor" href="#文件读取总结" aria-hidden="true">#</a> 文件读取总结</h4><p>上面提到了各种接口和实现，实际上都是围绕着<code>FlatFileItemReader</code>的属性在介绍，虽然内容很多但是实际上就以下几点：</p><ul><li>首先要定位文件，Spring Batch提供了<code>Resource</code>相关的定位方法。</li><li>其次是将文件中的行字符串数据转换为对象，<code>LineMapper</code>的功能就是完成这个功能。</li><li>框架为<code>LineMapper</code>提供了<code>DefaultLineMapper</code>作为默认实现方法，在<code>DefaultLineMapper</code>中需要组合使用<code>LineTokenizer</code>和<code>FieldSetMapper</code>。前者将字符串转为为一个<code>Field</code>，后者将<code>Field</code>转换为目标对象。</li><li><code>LineTokenizer</code>有3个实现类可供使用、<code>FieldSetMapper</code>有一个默认实现类<code>BeanWrapperFieldSetMapper</code>。</li></ul><h4 id="文件读取可执行源码" tabindex="-1"><a class="header-anchor" href="#文件读取可执行源码" aria-hidden="true">#</a> 文件读取可执行源码</h4><p>可执行的源码在下列地址的<em>items</em>子工程中：</p>`,33),j={href:"https://gitee.com/chkui-com/spring-batch-sample",target:"_blank",rel:"noopener noreferrer"},q={href:"https://github.com/chkui/spring-batch-sample",target:"_blank",rel:"noopener noreferrer"},U={href:"https://cloud.tencent.com/solution/database?from=10680",target:"_blank",rel:"noopener noreferrer"},W={href:"http://xn--README-9v7i549abqyor0b7jsgobo9e.md",target:"_blank",rel:"noopener noreferrer"},X=e(`<p>文件读取的主要逻辑在<code>org.chenkui.spring.batch.sample.items.FlatFileReader</code>类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlatFileReader</span> <span class="token punctuation">{</span>
    <span class="token comment">// FeildSet的字段名，设置字段名之后可以直接使用名字作为索引获取数据。也可以使用索引位置来获取数据</span>
    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token class-name">Tokenizer</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;siteId&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;month&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;type&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ext&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">boolean</span> userWrapper <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token comment">//定义FieldSetMapper用于FieldSet-&gt;WeatherEntity</span>
    <span class="token keyword">public</span> <span class="token class-name">FieldSetMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WeatherEntity</span><span class="token punctuation">&gt;</span></span> <span class="token function">fieldSetMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FieldSetMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WeatherEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">WeatherEntity</span> <span class="token function">mapFieldSet</span><span class="token punctuation">(</span><span class="token class-name">FieldSet</span> fieldSet<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BindException</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">null</span> <span class="token operator">==</span> fieldSet<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// fieldSet不存在则跳过该行处理</span>
                    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span> 
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token class-name">WeatherEntity</span> observe <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeatherEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    observe<span class="token punctuation">.</span><span class="token function">setSiteId</span><span class="token punctuation">(</span>fieldSet<span class="token punctuation">.</span><span class="token function">readRawString</span><span class="token punctuation">(</span><span class="token string">&quot;siteId&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token comment">//Setter</span>
                    <span class="token keyword">return</span> observe<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token comment">// 配置 Reader</span>
    <span class="token keyword">public</span> <span class="token class-name">ItemReader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WeatherEntity</span><span class="token punctuation">&gt;</span></span> <span class="token function">flatFileReader</span><span class="token punctuation">(</span>
                           <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;fieldSetMapper&quot;</span><span class="token punctuation">)</span> <span class="token class-name">FieldSetMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WeatherEntity</span><span class="token punctuation">&gt;</span></span> fieldSetMapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">FlatFileItemReader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WeatherEntity</span><span class="token punctuation">&gt;</span></span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlatFileItemReader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token comment">// 读取资源文件</span>
        reader<span class="token punctuation">.</span><span class="token function">setResource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span><span class="token string">&quot;src/main/resources/data.csv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token comment">// 初始化 LineMapper实现类</span>
        <span class="token class-name">DefaultLineMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WeatherEntity</span><span class="token punctuation">&gt;</span></span> lineMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultLineMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token comment">// 创建LineTokenizer接口实现</span>
        <span class="token class-name">DelimitedLineTokenizer</span> tokenizer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelimitedLineTokenizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 设定每个字段的名称，如果不设置需要使用索引获取值</span>
        tokenizer<span class="token punctuation">.</span><span class="token function">setNames</span><span class="token punctuation">(</span><span class="token class-name">Tokenizer</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
         <span class="token comment">// 设置tokenizer工具</span>
        lineMapper<span class="token punctuation">.</span><span class="token function">setLineTokenizer</span><span class="token punctuation">(</span>tokenizer<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//使用 BeanWrapperFieldSetMapper 使用反射直接转换</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>userWrapper<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
            <span class="token class-name">BeanWrapperFieldSetMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WeatherEntity</span><span class="token punctuation">&gt;</span></span> wrapperMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanWrapperFieldSetMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            wrapperMapper<span class="token punctuation">.</span><span class="token function">setTargetType</span><span class="token punctuation">(</span><span class="token class-name">WeatherEntity</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            fieldSetMapper <span class="token operator">=</span> wrapperMapper<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        lineMapper<span class="token punctuation">.</span><span class="token function">setFieldSetMapper</span><span class="token punctuation">(</span>fieldSetMapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
        reader<span class="token punctuation">.</span><span class="token function">setLineMapper</span><span class="token punctuation">(</span>lineMapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token comment">// 跳过的初始行，用于过滤字段行</span>
        reader<span class="token punctuation">.</span><span class="token function">setLinesToSkip</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        reader<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ExecutionContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> reader<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="按字段长度格读取文件" tabindex="-1"><a class="header-anchor" href="#按字段长度格读取文件" aria-hidden="true">#</a> 按字段长度格读取文件</h4><p>除了按照分隔符，有些文件可以字段数据的占位长度来提取数据。按照前面介绍的过程，实际上只要修改LineTokenizer接口即可，框架提供了<code>FixedLengthTokenizer</code>类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">FixedLengthTokenizer</span> <span class="token function">fixedLengthTokenizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">FixedLengthTokenizer</span> tokenizer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FixedLengthTokenizer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    tokenizer<span class="token punctuation">.</span><span class="token function">setNames</span><span class="token punctuation">(</span><span class="token string">&quot;ISIN&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Quantity&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Price&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Customer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//Range用于设定数据的长度。</span>
    tokenizer<span class="token punctuation">.</span><span class="token function">setColumns</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        <span class="token keyword">new</span> <span class="token class-name">Range</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token operator">-</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        <span class="token keyword">new</span> <span class="token class-name">Range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        <span class="token keyword">new</span> <span class="token class-name">Range</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token operator">-</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">return</span> tokenizer<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="写入扁平结构文件" tabindex="-1"><a class="header-anchor" href="#写入扁平结构文件" aria-hidden="true">#</a> 写入扁平结构文件</h3><p>将数据写入到文件与读取的过程正好相反：将对象转换为字符串。</p><h4 id="lineaggregator" tabindex="-1"><a class="header-anchor" href="#lineaggregator" aria-hidden="true">#</a> LineAggregator</h4><p>与<code>LineMapper</code>相对应的是<code>LineAggregator</code>，他的功能是将实体转换为字符串：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">LineAggregator</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> String <span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token constant">T</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="passthroughlineaggregator" tabindex="-1"><a class="header-anchor" href="#passthroughlineaggregator" aria-hidden="true">#</a> PassThroughLineAggregator</h4><p>框架为<code>LineAggregator</code>接口提供了一个非常简单的实现类——<code>PassThroughLineAggregator</code>，其唯一实现就是使用对象的<code>toString</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PassThroughLineAggregator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">LineAggregator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token class-name">T</span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> item<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="delimitedlineaggregator" tabindex="-1"><a class="header-anchor" href="#delimitedlineaggregator" aria-hidden="true">#</a> DelimitedLineAggregator</h4><p><code>LineAggregator</code>的另外一个实现类是<code>DelimitedLineAggregator</code>。与<code>PassThroughLineAggregator</code>简单直接使用<code>toString</code>方法不同的是，<code>DelimitedLineAggregator</code>需要一个转换接口<code>FieldExtractor</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">DelimitedLineAggregator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CustomerCredit</span><span class="token punctuation">&gt;</span></span> lineAggregator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelimitedLineAggregator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
lineAggregator<span class="token punctuation">.</span><span class="token function">setDelimiter</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
lineAggregator<span class="token punctuation">.</span><span class="token function">setFieldExtractor</span><span class="token punctuation">(</span>fieldExtractor<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="fieldextractor" tabindex="-1"><a class="header-anchor" href="#fieldextractor" aria-hidden="true">#</a> FieldExtractor</h4><p><code>FieldExtractor</code>用于实体类到<code>collection</code>结构的转换。它可以和<code>LineTokenizer</code>进行类比，前者是将实体类转换为扁平结构的数据，后者是将<code>String</code>转换为一个<code>FieldSet</code>结构。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FieldExtractor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">extract</span><span class="token punctuation">(</span><span class="token class-name">T</span> item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>框架为<code>FieldExtractor</code>接口提供了一个基于反射的实现类<code>BeanWrapperFieldExtractor</code>，其过程就是将实体对象转换为列表：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">BeanWrapperFieldExtractor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CustomerCredit</span><span class="token punctuation">&gt;</span></span> fieldExtractor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanWrapperFieldExtractor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
fieldExtractor<span class="token punctuation">.</span><span class="token function">setNames</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span><span class="token string">&quot;field1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;field2&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>setName</code>方法用于指定要转换的<code>field</code>列表。</p><h4 id="输出文件处理" tabindex="-1"><a class="header-anchor" href="#输出文件处理" aria-hidden="true">#</a> 输出文件处理</h4><p>​ 文件读取的逻辑非常简单：文件存在打开文件并写入数据，当文件不存在抛出异常。但是写入文件明显不能这么简单粗暴。新建一个<code>JobInstance</code>时最直观的操作是：存在同名文件就抛出异常，不存在则创建文件并写入数据。但是这样做显然有很大的问题，当批处理过程中出现问题需要<code>restart</code>，此时并不会从头开始处理所有的数据，而是要求文件存在并接着继续写入。为了确保这个过程 <code>FlatFileItemWriter</code>默认会在新 <code>JobInstance</code>运行时删除已有文件，而运行重启时继续在文件末尾写入。 <code>FlatFileItemWriter</code>可以使用 <code>shouldDeleteIfExists</code>、 <code>appendAllowed</code>、 <code>shouldDeleteIfEmpty</code>来有针对性的控制文件。</p><h4 id="文件写入可执源码" tabindex="-1"><a class="header-anchor" href="#文件写入可执源码" aria-hidden="true">#</a> 文件写入可执源码</h4><p>文件写入主要代码在<code>org.chenkui.spring.batch.sample.items.FlatFileWriter</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlatFileWriter</span> <span class="token punctuation">{</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> useBuilder <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ItemWriter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MaxTemperatureEntiry</span><span class="token punctuation">&gt;</span></span> <span class="token function">flatFileWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">BeanWrapperFieldExtractor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MaxTemperatureEntiry</span><span class="token punctuation">&gt;</span></span> fieldExtractor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanWrapperFieldExtractor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fieldExtractor<span class="token punctuation">.</span><span class="token function">setNames</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">&quot;siteId&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;date&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;temperature&quot;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置映射field</span>
        fieldExtractor<span class="token punctuation">.</span><span class="token function">afterPropertiesSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//参数检查</span>

        <span class="token class-name">DelimitedLineAggregator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MaxTemperatureEntiry</span><span class="token punctuation">&gt;</span></span> lineAggregator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelimitedLineAggregator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        lineAggregator<span class="token punctuation">.</span><span class="token function">setDelimiter</span><span class="token punctuation">(</span><span class="token string">&quot;,&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置输出分隔符</span>
        lineAggregator<span class="token punctuation">.</span><span class="token function">setFieldExtractor</span><span class="token punctuation">(</span>fieldExtractor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置FieldExtractor处理器</span>

        <span class="token class-name">FlatFileItemWriter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MaxTemperatureEntiry</span><span class="token punctuation">&gt;</span></span> fileWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlatFileItemWriter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        fileWriter<span class="token punctuation">.</span><span class="token function">setLineAggregator</span><span class="token punctuation">(</span>lineAggregator<span class="token punctuation">)</span><span class="token punctuation">;</span>
        fileWriter<span class="token punctuation">.</span><span class="token function">setResource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span><span class="token string">&quot;src/main/resources/out-data.csv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置输出文件位置</span>
        fileWriter<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;outpufData&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>useBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//使用builder方式创建</span>
            fileWriter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FlatFileItemWriterBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MaxTemperatureEntiry</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;outpufData&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileSystemResource</span><span class="token punctuation">(</span><span class="token string">&quot;src/main/resources/out-data.csv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lineAggregator</span><span class="token punctuation">(</span>lineAggregator<span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> fileWriter<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>文件的写入过程与读取过程完全对称相反：先用<code>FieldExtractor</code>将对象转换为一个<code>collection</code>结构（列表），然后用<code>lineAggregator</code>将<code>collection</code>转化为带分隔符的字符串。</p><h3 id="代码说明" tabindex="-1"><a class="header-anchor" href="#代码说明" aria-hidden="true">#</a> 代码说明</h3>`,29),H={href:"https://github.com/chkui/bi-process-example",target:"_blank",rel:"noopener noreferrer"},z={href:"ftp://ftp.ncdc.noaa.gov/pub/data/ghcn/daily/by_year/2015.csv.gz",target:"_blank",rel:"noopener noreferrer"},V={href:"ftp://ftp.ncdc.noaa.gov/pub/data/ghcn/daily/ghcnd-stations.txt",target:"_blank",rel:"noopener noreferrer"},Q=s("li",null,[n("代码实现了读取文件、处理文件、写入文件的整个过程。处理文件的过程是只获取监控的最高温度信息（"),s("code",null,"Type=TMAX"),n("），其他都过滤。")],-1),G=s("code",null,"org.chenkui.spring.batch.sample.flatfile.FlatFileItemApplication::main",-1),K={href:"https://www.chkui.com/article/spring/spring_batch_item_and_code_case",target:"_blank",rel:"noopener noreferrer"},Y=s("em",null,"命令行方式运行",-1),Z=s("em",null,"Java内嵌运行",-1),$=e('<h2 id="spring-batch——数据库批数据读写" tabindex="-1"><a class="header-anchor" href="#spring-batch——数据库批数据读写" aria-hidden="true">#</a> Spring Batch——数据库批数据读写</h2><p>本文将接着前面的内容说明数据库如何进行批处理读写。</p><h3 id="数据读取-1" tabindex="-1"><a class="header-anchor" href="#数据读取-1" aria-hidden="true">#</a> 数据读取</h3><p>数据库是绝大部分系统要用到的数据存储工具，因此针对数据库执行批量数据处理任务也是很常见的需求。数据的批量处理与常规业务开发不同，如果一次性读取百万条，对于任何系统而言肯定都是不可取的。为了解决这个问题Spring Batch提供了2套数据读取方案：</p><ul><li>基于游标读取数据</li><li>基于分页读取数据</li></ul><h3 id="游标读取数据" tabindex="-1"><a class="header-anchor" href="#游标读取数据" aria-hidden="true">#</a> 游标读取数据</h3>',6),nn={href:"https://cloud.tencent.com/solution/bigdata?from=10680",target:"_blank",rel:"noopener noreferrer"},sn=s("em",null,"数据流",-1),an=s("code",null,"ResultSet",-1),tn=e('<p><code>ResultSet</code>一直都会指向<em>结果集</em>中的某一行数据，使用<code>next</code>方法可以让游标跳转到下一行数据。Spring Batch同样使用这个特性来控制数据的读取：</p><ol><li>在初始化时打开游标。</li><li>每一次调用<code>ItemReader::read</code>方法就从<code>ResultSet</code>获取一行数据并执行<code>next</code>。</li><li>返回可用于数据处理的映射结构（map、dict）。</li></ol><p>在一切都执行完毕之后，框架会使用回调过程调用<code>ResultSet::close</code>来关闭游标。由于所有的业务过程都绑定在一个事物之上，所以知道到<code>Step</code>执行完毕或异常退出调用执行<code>close</code>。下图展示了数据读取的过程：</p><p><img src="'+v+`" alt="c9etsbwt90"></p><p>SQL语句的查询结果称为<em>数据集</em>（对于大部分数据库而言，其SQL执行结果会产生临时的表空间索引来存放数据集）。游标开始会停滞在ID=2的位置，一次<code>ItemReader</code>执行完毕后会产生对应的实体<code>FOO2</code>，然后游标下移直到最后的ID=6。最后关闭游标。</p><h4 id="jdbccursoritemreader" tabindex="-1"><a class="header-anchor" href="#jdbccursoritemreader" aria-hidden="true">#</a> JdbcCursorItemReader</h4><p><code>JdbcCursorItemReader</code>是使用游标读取数据集的<code>ItemReader</code>实现类之一。它使用<code>JdbcTemplate</code>中的<code>DataSource</code>控制<code>ResultSet</code>,其过程是将<code>ResultSet</code>的每行数据转换为所需要的实体类。</p><p><code>JdbcCursorItemReader</code>的执行过程有三步：</p><ol><li>通过<code>DataSource</code>创建<code>JdbcTemplate</code>。</li><li>设定数据集的SQL语句。</li><li>创建<code>ResultSet</code>到实体类的映射。 大致如下：</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//随风溜达的向日葵 chkui.com</span>
<span class="token class-name">JdbcCursorItemReader</span> itemReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcCursorItemReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
itemReader<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
itemReader<span class="token punctuation">.</span><span class="token function">setSql</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT ID, NAME, CREDIT from CUSTOMER&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
itemReader<span class="token punctuation">.</span><span class="token function">setRowMapper</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomerCreditRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了上面的代码，<code>JdbcCursorItemReader</code>还有其他属性：</p><table><thead><tr><th style="text-align:left;">属性名称</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;">ignoreWarnings</td><td style="text-align:left;">标记当执行SQL语句出现警告时，是输出日志还是抛出异常，默认为true——输出日志</td></tr><tr><td style="text-align:left;">fetchSize</td><td style="text-align:left;">预通知JDBC驱动全量数据的个数</td></tr><tr><td style="text-align:left;">maxRows</td><td style="text-align:left;">设置ResultSet从数据库中一次读取记录的上限</td></tr><tr><td style="text-align:left;">queryTimeout</td><td style="text-align:left;">设置执行SQL语句的等待超时时间，单位秒。当超过这个时间会抛出DataAccessException</td></tr><tr><td style="text-align:left;">verifyCursorPosition</td><td style="text-align:left;">对游标位置进行校验。由于在RowMapper::mapRow方法中ResultSet是直接暴露给使用者的，因此有可能在业务代码层面调用了ResultSet::next方法。将这个属性设置为true,在框架中会有一个位置计数器与ResultSet保持一致，当执行完Reader后位置不一致会抛出异常。</td></tr><tr><td style="text-align:left;">saveState</td><td style="text-align:left;">标记读取的状态是否被存放到ExecutionContext中。默认为true</td></tr><tr><td style="text-align:left;">driverSupportsAbsolute</td><td style="text-align:left;">告诉框架是指直接使用ResultSet::absolute方法来指定游标位置，使用这个属性需要数据库驱动支持。建议在支持absolute特性的数据库上开启这个特性，能够明显的提升性能。默认为false</td></tr><tr><td style="text-align:left;">setUseSharedExtendedConnection</td><td style="text-align:left;">标记读取数据的游标是否与Step其他过程绑定成同一个事物。默认为false,表示读取数据的游标是单独建立连接的，具有自身独立的事物。如果设定为true需要用ExtendedConnectionDataSourceProxy包装DataSource用于管理事物过程。此时游标的创建标记为&#39;READ_ONLY&#39;、&#39;HOLD_CURSORS_OVER_COMMIT&#39;。需要注意的是该属性需要数据库支持3.0以上的JDBC驱动。</td></tr></tbody></table><p>执行<code>JdbcCursorItemReader</code>的代码在<code>org.chenkui.spring.batch.sample.items.JdbcReader</code>。启动位置是<code>org.chenkui.spring.batch.sample.database.cursor.JdbcCurosrApplication</code>。</p><p>在运行代码之前请先在数据库中执行以下DDL语句，并添加部分测试数据。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">\`</span>tmp_test_weather<span class="token punctuation">\`</span></span> <span class="token punctuation">(</span>
  <span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">unsigned</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;主键&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>siteid<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;业务主键&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>month<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;日期&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>type<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;气象类型&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>value<span class="token punctuation">\`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;值&#39;</span><span class="token punctuation">,</span>
  <span class="token identifier"><span class="token punctuation">\`</span>ext<span class="token punctuation">\`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;扩展数据&#39;</span><span class="token punctuation">,</span>
  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">\`</span>id<span class="token punctuation">\`</span></span><span class="token punctuation">)</span>
<span class="token punctuation">)</span> <span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//随风溜达的向日葵 chkui.com</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcReader</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WeatherEntity</span><span class="token punctuation">&gt;</span></span> <span class="token function">weatherEntityRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WeatherEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">SITEID_COLUMN</span> <span class="token operator">=</span> <span class="token string">&quot;siteId&quot;</span><span class="token punctuation">;</span> <span class="token comment">// 设置映射字段</span>
            <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">MONTH_COLUMN</span> <span class="token operator">=</span> <span class="token string">&quot;month&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TYPE_COLUMN</span> <span class="token operator">=</span> <span class="token string">&quot;type&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">VALUE_COLUMN</span> <span class="token operator">=</span> <span class="token string">&quot;value&quot;</span><span class="token punctuation">;</span>
            <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">EXT_COLUMN</span> <span class="token operator">=</span> <span class="token string">&quot;ext&quot;</span><span class="token punctuation">;</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token comment">// 数据转换</span>
            <span class="token keyword">public</span> <span class="token class-name">WeatherEntity</span> <span class="token function">mapRow</span><span class="token punctuation">(</span><span class="token class-name">ResultSet</span> resultSet<span class="token punctuation">,</span> <span class="token keyword">int</span> rowNum<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">SQLException</span> <span class="token punctuation">{</span>
                <span class="token class-name">WeatherEntity</span> weatherEntity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeatherEntity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                weatherEntity<span class="token punctuation">.</span><span class="token function">setSiteId</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token constant">SITEID_COLUMN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                weatherEntity<span class="token punctuation">.</span><span class="token function">setMonth</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token constant">MONTH_COLUMN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                weatherEntity<span class="token punctuation">.</span><span class="token function">setType</span><span class="token punctuation">(</span><span class="token class-name">WeatherEntity<span class="token punctuation">.</span>Type</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token constant">TYPE_COLUMN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                weatherEntity<span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token constant">VALUE_COLUMN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                weatherEntity<span class="token punctuation">.</span><span class="token function">setExt</span><span class="token punctuation">(</span>resultSet<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token constant">EXT_COLUMN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> weatherEntity<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ItemReader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WeatherEntity</span><span class="token punctuation">&gt;</span></span> <span class="token function">jdbcCursorItemReader</span><span class="token punctuation">(</span>
        <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;weatherEntityRowMapper&quot;</span><span class="token punctuation">)</span> <span class="token class-name">RowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WeatherEntity</span><span class="token punctuation">&gt;</span></span> rowMapper<span class="token punctuation">,</span> <span class="token class-name">DataSource</span> datasource<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">JdbcCursorItemReader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WeatherEntity</span><span class="token punctuation">&gt;</span></span> itemReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcCursorItemReader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        itemReader<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>datasource<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置DataSource</span>
        <span class="token comment">//设置读取的SQL</span>
        itemReader<span class="token punctuation">.</span><span class="token function">setSql</span><span class="token punctuation">(</span><span class="token string">&quot;SELECT siteId, month, type, value, ext from TMP_TEST_WEATHER&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
        itemReader<span class="token punctuation">.</span><span class="token function">setRowMapper</span><span class="token punctuation">(</span>rowMapper<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置转换</span>
        <span class="token keyword">return</span> itemReader<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="hibernatecursoritemreader" tabindex="-1"><a class="header-anchor" href="#hibernatecursoritemreader" aria-hidden="true">#</a> HibernateCursorItemReader</h4><p>在Java体系中数据库操作常见的规范有<code>JPA</code>或<code>ORM</code>，Spring Batch提供了<code>HibernateCursorItemReader</code>来实现<code>HibernateTemplate</code>,它可以通过<em>Hibernate</em>框架进行游标的控制。</p><p><strong>需要注意的是</strong>：使用Hibernate框架来处理批量数据到目前为止一直都有争议，核心原因是Hibernate最初是为在线联机事物型系统开发的。不过这并不意味着不能使用它来处理批数据，解决此问题就是让Hibernate使用<code>StatelessSession</code>用来保持游标，而不是<code>standard session</code>一次读写，这将导致Hibernate的缓存机制和数据脏读检查失效，进而影响批处理的过程。关于Hibernate的状态控制机制请阅读官方文档。</p><p><code>HibernateCursorItemReader</code>使用过程与<code>JdbcCursorItemReader</code>没多大差异都是逐条读取数据然后控制状态链接关闭。只不过他提供了Hibernate所使用的HSQL方案。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">ItemReader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WeatherEntity</span><span class="token punctuation">&gt;</span></span> <span class="token function">hibernateCursorItemReader</span><span class="token punctuation">(</span><span class="token class-name">SessionFactory</span> sessionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">HibernateCursorItemReader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WeatherEntity</span><span class="token punctuation">&gt;</span></span> itemReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HibernateCursorItemReader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    itemReader<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;hibernateCursorItemReader&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    itemReader<span class="token punctuation">.</span><span class="token function">setQueryString</span><span class="token punctuation">(</span><span class="token string">&quot;from WeatherEntity tmp_test_weather&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    itemReader<span class="token punctuation">.</span><span class="token function">setSessionFactory</span><span class="token punctuation">(</span>sessionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> itemReader<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>或</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">ItemReader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WeatherEntity</span><span class="token punctuation">&gt;</span></span> <span class="token function">hibernateCursorItemReader</span><span class="token punctuation">(</span><span class="token class-name">SessionFactory</span> sessionFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HibernateCursorItemReaderBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CustomerCredit</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;creditReader&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">sessionFactory</span><span class="token punctuation">(</span>sessionFactory<span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">queryString</span><span class="token punctuation">(</span><span class="token string">&quot;from CustomerCredit&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果没有特别的需要，不推荐使用<em>Hibernate</em>。</p><h4 id="storedprocedureitemreader" tabindex="-1"><a class="header-anchor" href="#storedprocedureitemreader" aria-hidden="true">#</a> StoredProcedureItemReader</h4><p>存储过程是在同一个数据库中处理大量数据的常用方法。<code>StoredProcedureItemReader</code>的执行过程和<code>JdbcCursorItemReader</code>一致，但是底层逻辑是先执行存储过程，然后返回存储过程执行结果游标。不同的数据库存储过程游标返回会有一些差异：</p><ol><li>作为一个<code>ResultSet</code>返回。（SQL Server Sybase, DB2, Derby以及MySQL）</li><li>参数返回一个 <code>ref-cursor</code>实例。比如Oracle、PostgreSQL数据库，这类数据库存储过程是不会直接return任何内容的，需要从传参获取。</li><li>返回存储过程调用后的返回值。</li></ol><p>针对以上3个类型，配置上有一些差异：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//随风溜达的向日葵 chkui.com</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">StoredProcedureItemReader</span> <span class="token function">reader</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">StoredProcedureItemReader</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StoredProcedureItemReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    reader<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    reader<span class="token punctuation">.</span><span class="token function">setProcedureName</span><span class="token punctuation">(</span><span class="token string">&quot;sp_processor_weather&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    reader<span class="token punctuation">.</span><span class="token function">setRowMapper</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">weatherEntityRowMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//第二种类型需要指定ref-cursor的参数位置</span>
    reader<span class="token punctuation">.</span><span class="token function">setRefCursorPosition</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//第三种类型需要明确的告知reader通过返回获取</span>
    reader<span class="token punctuation">.</span><span class="token function">setFunction</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> reader<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用存储过程处理数据的好处是可以实现针对库内的数据进行合并、分割、排序等处理。如果数据在同一个数据库，性能也明显好于通过Java处理。</p><h3 id="分页读取数据" tabindex="-1"><a class="header-anchor" href="#分页读取数据" aria-hidden="true">#</a> 分页读取数据</h3><p>相对于游标，还有一个办法是进行分页查询。分页查询意味着再进行批处理的过程中同一个SQL会多次执行。在联机型事物系统中分页查询常用于列表功能，每一次查询需要指定开始位置和结束位置。</p><h4 id="jdbcpagingitemreader" tabindex="-1"><a class="header-anchor" href="#jdbcpagingitemreader" aria-hidden="true">#</a> JdbcPagingItemReader</h4><p>分页查询的默认实现类是<code>JdbcPagingItemReader</code>，它的核心功能是用分页器<code>PagingQueryProvider</code>进行分页控制。由于不同的数据库分页方法差别很大，所以针对不同的数据库有不同的实现类。框架提供了<code>SqlPagingQueryProviderFactoryBean</code>用于检查当前数据库并自动注入对应的<code>PagingQueryProvider</code>。</p><p><code>JdbcPagingItemReader</code>会从数据库中一次性读取一整页的数据，但是调用<code>Reader</code>的时候还是会一行一行的返回数据。框架会自行根据运行情况确定什么时候需要执行下一个分页的查询。</p><h5 id="分页读取数据执行源码" tabindex="-1"><a class="header-anchor" href="#分页读取数据执行源码" aria-hidden="true">#</a> 分页读取数据执行源码</h5>`,37),en={href:"https://gitee.com/chkui-com/spring-batch-sample",target:"_blank",rel:"noopener noreferrer"},pn={href:"https://github.com/chkui/spring-batch-sample",target:"_blank",rel:"noopener noreferrer"},on=e(`<p>执行<code>JdbcPagingItemReader</code>的代码在<code>org.chenkui.spring.batch.sample.items.pageReader</code>。启动位置是<code>org.chenkui.spring.batch.sample.database.paging.JdbcPagingApplication</code>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//随风溜达的向日葵 chkui.com</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> pageReader <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token keyword">private</span> <span class="token keyword">boolean</span> wrapperBuilder <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token comment">//设置 queryProvider</span>
    <span class="token keyword">public</span> <span class="token class-name">SqlPagingQueryProviderFactoryBean</span> <span class="token function">queryProvider</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SqlPagingQueryProviderFactoryBean</span> provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlPagingQueryProviderFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        provider<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
        provider<span class="token punctuation">.</span><span class="token function">setSelectClause</span><span class="token punctuation">(</span><span class="token string">&quot;select id, siteid, month, type, value, ext&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        provider<span class="token punctuation">.</span><span class="token function">setFromClause</span><span class="token punctuation">(</span><span class="token string">&quot;from tmp_test_weather&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        provider<span class="token punctuation">.</span><span class="token function">setWhereClause</span><span class="token punctuation">(</span><span class="token string">&quot;where id&gt;:start&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        provider<span class="token punctuation">.</span><span class="token function">setSortKey</span><span class="token punctuation">(</span><span class="token string">&quot;id&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> provider<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ItemReader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WeatherEntity</span><span class="token punctuation">&gt;</span></span> <span class="token function">jdbcPagingItemReader</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">,</span>
            <span class="token class-name">PagingQueryProvider</span> queryProvider<span class="token punctuation">,</span>
            <span class="token class-name">RowMapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WeatherEntity</span><span class="token punctuation">&gt;</span></span> rowMapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> parameterValues <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        parameterValues<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">&quot;start&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">JdbcPagingItemReader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WeatherEntity</span><span class="token punctuation">&gt;</span></span> itemReader<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>wrapperBuilder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            itemReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcPagingItemReaderBuilder</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WeatherEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;creditReader&quot;</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">dataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">queryProvider</span><span class="token punctuation">(</span>queryProvider<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">parameterValues</span><span class="token punctuation">(</span>parameterValues<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">rowMapper</span><span class="token punctuation">(</span>rowMapper<span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">pageSize</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span>
                    <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            itemReader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JdbcPagingItemReader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            itemReader<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&quot;weatherEntityJdbcPagingItemReader&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            itemReader<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
            itemReader<span class="token punctuation">.</span><span class="token function">setQueryProvider</span><span class="token punctuation">(</span>queryProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>
            itemReader<span class="token punctuation">.</span><span class="token function">setParameterValues</span><span class="token punctuation">(</span>parameterValues<span class="token punctuation">)</span><span class="token punctuation">;</span>
            itemReader<span class="token punctuation">.</span><span class="token function">setRowMapper</span><span class="token punctuation">(</span>rowMapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
            itemReader<span class="token punctuation">.</span><span class="token function">setPageSize</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> itemReader<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数据写入" tabindex="-1"><a class="header-anchor" href="#数据写入" aria-hidden="true">#</a> 数据写入</h3><p>Spring Batch为不同类型的文件的写入提供了多个实现类，但并没有为数据库的写入提供任何实现类，而是交由开发者自己去实现接口。理由是：</p><ol><li>数据库的写入与文件写入有巨大的差别。对于一个<code>Step</code>而言，在写入一份文件时需要保持对文件的打开状态从而能够高效的向队尾添加数据。如果每次都重新打开文件，从开始位置移动到队尾会耗费大量的时间（很多文件流无法在open时就知道长度）。当整个<code>Step</code>结束时才能关闭文件的打开状态，框架提供的文件读写类都实现了这个控制过程。</li><li>另外无论使用何种方式将数据写入文件都是&quot;逐行进行&quot;的（流数据写入、字符串逐行写入）。因此当数据写入与整个<code>Step</code>绑定为事物时还需要实现一个控制过程是：在写入数据的过程中出现异常时要擦除本次事物已经写入的数据，这样才能和整个<code>Step</code>的状态保持一致。框架中的类同样实现了这个过程。</li><li>但是向数据库写入数据并不需要类似于文件的<em>尾部写入控制</em>，因为数据库的各种链接池本身就保证了链接-&gt;写入-&gt;释放的高效执行，也不存在向队尾添加数据的问题。而且几乎所有的数据库驱动都提供了事物能力，在任何时候出现异常都会自动回退，不存在擦除数据的问题。</li></ol><p>因此，对于数据库的写入操作只要按照常规的批量数据写入的方式即可，开发者使用任何工具都可以完成这个过程。</p><h4 id="写入数据一个简单的实现" tabindex="-1"><a class="header-anchor" href="#写入数据一个简单的实现" aria-hidden="true">#</a> 写入数据一个简单的实现</h4><p>实现数据写入方法很多，这和常规的联机事务系统没任何区别。下面直接用<code>JdbcTemplate</code>实现了一个简单的数据库写入过程。</p><p>执行数据库写入的核心代码在<code>org.chenkui.spring.batch.sample.items.JdbcWriter</code>。启动位置是<code>org.chenkui.spring.batch.sample.database.output.JdbcWriterApplication</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//随风溜达的向日葵 chkui.com</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JdbcWriter</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">ItemWriter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WeatherEntity</span><span class="token punctuation">&gt;</span></span> <span class="token function">jdbcBatchWriter</span><span class="token punctuation">(</span><span class="token class-name">JdbcTemplate</span> template<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ItemWriter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WeatherEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token class-name">INSERt_SQL</span> <span class="token operator">=</span> 
                      <span class="token string">&quot;INSERT INTO tmp_test_weather(siteid, month, type, value, ext) VALUES(?,?,?,?,?)&quot;</span><span class="token punctuation">;</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">write</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">WeatherEntity</span><span class="token punctuation">&gt;</span></span> items<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
                <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> batchArgs <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">WeatherEntity</span> entity <span class="token operator">:</span> items<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                    objects<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">getSiteId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    objects<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    objects<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    objects<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    objects<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> entity<span class="token punctuation">.</span><span class="token function">getExt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    batchArgs<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>objects<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                template<span class="token punctuation">.</span><span class="token function">batchUpdate</span><span class="token punctuation">(</span><span class="token class-name">INSERt_SQL</span><span class="token punctuation">,</span> batchArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="组合使用案例" tabindex="-1"><a class="header-anchor" href="#组合使用案例" aria-hidden="true">#</a> 组合使用案例</h3><p>下面是一些组合使用过程，简单实现了文件到数据库、数据库到文件的过程。文件读写的过程已经在文件读写中介绍过，这里会重复使用之前介绍的文件读写的功能。</p><p>下面的案例是将<code>data.csv</code>中的数据写入到数据库，然后再将数据写入到<code>out-data.csv</code>。案例组合使用已有的<code>item</code>完成任务：<code>flatFileReader</code>、<code>jdbcBatchWriter</code>、<code>jdbcCursorItemReader</code>、<code>simpleProcessor</code>、<code>flatFileWriter</code>。这种<code>Reader</code>、<code>Processor</code>、<code>Writer</code>组合的方式也是完成一个批处理工程的常见开发方式。</p><p>案例的运行代码在<code>org.chenkui.spring.batch.sample.database.complex</code>包中，使用了2个<code>Step</code>来完成任务，一个将数据读取到数据库，一个将数据进行过滤，然后再写入到文件：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//随风溜达的向日葵 chkui.com</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileComplexProcessConfig</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token comment">// 配置Step1</span>
    <span class="token keyword">public</span> <span class="token class-name">Step</span> <span class="token function">file2DatabaseStep</span><span class="token punctuation">(</span><span class="token class-name">StepBuilderFactory</span> builder<span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;flatFileReader&quot;</span><span class="token punctuation">)</span> <span class="token class-name">ItemReader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WeatherEntity</span><span class="token punctuation">&gt;</span></span> reader<span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;jdbcBatchWriter&quot;</span><span class="token punctuation">)</span> <span class="token class-name">ItemWriter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WeatherEntity</span><span class="token punctuation">&gt;</span></span> writer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;file2DatabaseStep&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 创建</span>
                <span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WeatherEntity</span><span class="token punctuation">,</span> <span class="token class-name">WeatherEntity</span><span class="token punctuation">&gt;</span></span><span class="token function">chunk</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token comment">// 分片</span>
                <span class="token punctuation">.</span><span class="token function">reader</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span> <span class="token comment">// 读取</span>
                <span class="token punctuation">.</span><span class="token function">writer</span><span class="token punctuation">(</span>writer<span class="token punctuation">)</span> <span class="token comment">// 写入</span>
                <span class="token punctuation">.</span><span class="token function">faultTolerant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 开启容错处理</span>
                <span class="token punctuation">.</span><span class="token function">skipLimit</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">// 跳过设置</span>
                <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">// 跳过异常</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token comment">// 配置Step2</span>
    <span class="token keyword">public</span> <span class="token class-name">Step</span> <span class="token function">database2FileStep</span><span class="token punctuation">(</span><span class="token class-name">StepBuilderFactory</span> builder<span class="token punctuation">,</span> 
            <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;jdbcCursorItemReader&quot;</span><span class="token punctuation">)</span> <span class="token class-name">ItemReader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WeatherEntity</span><span class="token punctuation">&gt;</span></span> reader<span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;simpleProcessor&quot;</span><span class="token punctuation">)</span> <span class="token class-name">ItemProcessor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WeatherEntity</span><span class="token punctuation">,</span> <span class="token class-name">MaxTemperatureEntiry</span><span class="token punctuation">&gt;</span></span> processor<span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;flatFileWriter&quot;</span><span class="token punctuation">)</span> <span class="token class-name">ItemWriter</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MaxTemperatureEntiry</span><span class="token punctuation">&gt;</span></span> writer<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;database2FileStep&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 创建</span>
                <span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WeatherEntity</span><span class="token punctuation">,</span> <span class="token class-name">MaxTemperatureEntiry</span><span class="token punctuation">&gt;</span></span><span class="token function">chunk</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token comment">// 分片</span>
                <span class="token punctuation">.</span><span class="token function">reader</span><span class="token punctuation">(</span>reader<span class="token punctuation">)</span> <span class="token comment">// 读取</span>
                <span class="token punctuation">.</span><span class="token function">processor</span><span class="token punctuation">(</span>processor<span class="token punctuation">)</span> <span class="token comment">//</span>
                <span class="token punctuation">.</span><span class="token function">writer</span><span class="token punctuation">(</span>writer<span class="token punctuation">)</span> <span class="token comment">// 写入</span>
                <span class="token punctuation">.</span><span class="token function">faultTolerant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 开启容错处理</span>
                <span class="token punctuation">.</span><span class="token function">skipLimit</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token comment">// 跳过设置</span>
                <span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token comment">// 跳过异常</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Job</span> <span class="token function">file2DatabaseJob</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;file2DatabaseStep&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Step</span> step2Database<span class="token punctuation">,</span>
            <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">&quot;database2FileStep&quot;</span><span class="token punctuation">)</span> <span class="token class-name">Step</span> step2File<span class="token punctuation">,</span> <span class="token class-name">JobBuilderFactory</span> builder<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> builder<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;File2Database&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span>step2Database<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span>step2File<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,16),cn=s("p",null,[s("a",{href:"read://https_cloud.tencent.com/?url=https%3A%2F%2Fcloud.tencent.com%2Fdeveloper%2Farticle%2F1456757"},"Spring Batch(1)——数据批处理概念 (tencent.com)")],-1),ln={href:"https://blog.csdn.net/lovepeacee/article/details/116003392",target:"_blank",rel:"noopener noreferrer"};function un(dn,rn){const p=o("RouterLink"),t=o("ExternalLinkIcon");return u(),d("div",null,[h,s("h2",g,[y,n(),a(p,{to:"/zh/%E5%90%8E%E7%AB%AF/Java/SpringBatch/SpringBatchStep.html"},{default:c(()=>[n("Spring Batch——Step控制")]),_:1})]),s("h2",E,[f,n(),a(p,{to:"/zh/%E5%90%8E%E7%AB%AF/Java/SpringBatch/SpringBatchJob.html"},{default:c(()=>[n("Spring Batch——Job配置与运行")]),_:1})]),T,s("p",null,[x,n("用于记录JobInstance，在"),s("a",S,[n("数据批处理概念"),a(t)]),n("中介绍了他的工作方式，其结构为：")]),_,s("p",null,[n("在上文中"),s("a",w,[n("Job"),a(t)]),n("、"),s("a",I,[n("Step"),a(t)]),n("都是属于框架级别的的功能，大部分时候都是提供一些配置选项给开发人员使用，而"),s("a",C,[n("Item"),a(t)]),n("中的"),N,n("、"),A,n("和"),R,n("是属于业务级别的，它开放了一些业务切入的接口。 但是文件的读写过程中有很多通用一致的功能Spring Batch为这些相同的功能提供了一致性实现类。")]),O,s("p",null,[n("Spring Batch为文件读取提供了"),B,n("类，它为文件中的数据的读取和转换提供了基本功能。在"),J,n("中有2个主要的功能接口，一是"),L,n("、二是"),M,n("。 "),D,n("用于外部文件获取，详情请查看"),s("a",P,[n("Spring核心——资源管理"),a(t)]),n("部分的内容，下面是一个例子：")]),F,s("ul",null,[s("li",null,[n("Gitee："),s("a",j,[n("https://gitee.com/chkui-com/spring-batch-sample"),a(t)])]),s("li",null,[n("Github："),s("a",q,[n("https://github.com/chkui/spring-batch-sample"),a(t)])])]),s("p",null,[n("运行之前需要配置"),s("a",U,[n("数据库"),a(t)]),n("链接，"),s("a",W,[n("参看源码库中的README.md"),a(t)]),n("。")]),X,s("ul",null,[s("li",null,[n("代码中的测试数据来自数据分析交流项目"),s("a",H,[n("bi-process-example"),a(t)]),n("，是NOAA的2015年全球天气监控数据。为了便于源码存储进行了大量的删减，原始数据有百万条，如有需要使用下列方式下载： curl -O "),s("a",z,[n("ftp://ftp.ncdc.noaa.gov/pub/data/ghcn/daily/by_year/2015.csv.gz"),a(t)]),n(" #数据文件 curl -O "),s("a",V,[n("ftp://ftp.ncdc.noaa.gov/pub/data/ghcn/daily/ghcnd-stations.txt"),a(t)]),n(" # 文件结构及类型说明")]),Q,s("li",null,[n("本案例的代码使用"),G,n("方法运行，使用的是Command Runner的方式执行（运行方式的说明见"),s("a",K,[n("Item概念及使用代码"),a(t)]),n("的"),Y,n("、"),Z,n("）。")])]),$,s("p",null,[n("对于有经验"),s("a",nn,[n("大数据"),a(t)]),n("工程师而言数据库游标的操作应该是非常熟悉的，因为这是从数据库读取"),sn,n("标准方法，而且在Java中也封装了"),an,n("这种面向游标操作的数据结构。")]),tn,s("ul",null,[s("li",null,[n("Gitee："),s("a",en,[n("https://gitee.com/chkui-com/spring-batch-sample"),a(t)])]),s("li",null,[n("Github："),s("a",pn,[n("https://github.com/chkui/spring-batch-sample"),a(t)])])]),on,s("blockquote",null,[cn,s("p",null,[s("a",ln,[n("Spring Batch中@StepScope的适用范围及理解_lovepeacee的博客-CSDN博客"),a(t)])])])])}const vn=i(b,[["render",un],["__file","SpringBatch.html.vue"]]);export{vn as default};
