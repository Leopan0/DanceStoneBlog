const e=JSON.parse('{"key":"v-25b7d790","path":"/zh/%E5%90%8E%E7%AB%AF/Java/Java%E5%9F%BA%E7%A1%80/%E7%BA%BF%E7%A8%8B%E6%B1%A0.html","title":"线程池","lang":"zh-CN","frontmatter":{"title":"线程池","isOriginal":true,"description":"线程池 始 ​\\t\\t多线程是项目扩大以后，必不可少需要应用到的技术。线程池的应用，更加便利多线程的使用。 Java 默认支持线程池，在 Java 线程池的基础上，Pivotal 在 Spring 框架内，提供了 Spring 线程池。两者皆是主流的线程池。 基本概念 线程池，本质上是一种对象池，用于管理线程资源。 在任务执行前，需要从线程池中拿出线程来执行。 在任务执行完成之后，需要把线程放回线程池。 通过线程的这种反复利用机制，可以有效地避免直接创建线程所带来的坏处。","head":[["meta",{"property":"og:url","content":"https://github.com/Leopan0/DanceStoneBlog/zh/%E5%90%8E%E7%AB%AF/Java/Java%E5%9F%BA%E7%A1%80/%E7%BA%BF%E7%A8%8B%E6%B1%A0.html"}],["meta",{"property":"og:site_name","content":"会跳舞的石头"}],["meta",{"property":"og:title","content":"线程池"}],["meta",{"property":"og:description","content":"线程池 始 ​\\t\\t多线程是项目扩大以后，必不可少需要应用到的技术。线程池的应用，更加便利多线程的使用。 Java 默认支持线程池，在 Java 线程池的基础上，Pivotal 在 Spring 框架内，提供了 Spring 线程池。两者皆是主流的线程池。 基本概念 线程池，本质上是一种对象池，用于管理线程资源。 在任务执行前，需要从线程池中拿出线程来执行。 在任务执行完成之后，需要把线程放回线程池。 通过线程的这种反复利用机制，可以有效地避免直接创建线程所带来的坏处。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-05-25T09:32:08.000Z"}],["meta",{"property":"article:author","content":"会跳舞的石头"}],["meta",{"property":"article:modified_time","content":"2023-05-25T09:32:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"线程池\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2023-05-25T09:32:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"会跳舞的石头\\",\\"url\\":\\"https://github.com/Leopan0/DanceStoneBlog\\"}]}"]]},"headers":[{"level":2,"title":"始","slug":"始","link":"#始","children":[{"level":3,"title":"基本概念","slug":"基本概念","link":"#基本概念","children":[]}]},{"level":2,"title":"Java 线程池","slug":"java-线程池","link":"#java-线程池","children":[{"level":3,"title":"入门案例","slug":"入门案例","link":"#入门案例","children":[]},{"level":3,"title":"Executors-Java线程池","slug":"executors-java线程池","link":"#executors-java线程池","children":[]},{"level":3,"title":"手动创建线程池","slug":"手动创建线程池","link":"#手动创建线程池","children":[]},{"level":3,"title":"提交任务的几种方式","slug":"提交任务的几种方式","link":"#提交任务的几种方式","children":[]},{"level":3,"title":"关闭线程池","slug":"关闭线程池","link":"#关闭线程池","children":[]},{"level":3,"title":"如何正确配置线程池的参数","slug":"如何正确配置线程池的参数","link":"#如何正确配置线程池的参数","children":[]},{"level":3,"title":"线程池监控","slug":"线程池监控","link":"#线程池监控","children":[]}]},{"level":2,"title":"Spring 线程池","slug":"spring-线程池","link":"#spring-线程池","children":[{"level":3,"title":"常用线程池","slug":"常用线程池","link":"#常用线程池","children":[]},{"level":3,"title":"SyncTaskExecutor 同步线程池","slug":"synctaskexecutor-同步线程池","link":"#synctaskexecutor-同步线程池","children":[]},{"level":3,"title":"Spring 异步线程池实现原理","slug":"spring-异步线程池实现原理","link":"#spring-异步线程池实现原理","children":[]},{"level":3,"title":"Spring 异步线程池","slug":"spring-异步线程池","link":"#spring-异步线程池","children":[]}]},{"level":2,"title":"参考","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1685007128000,"updatedTime":1685007128000,"contributors":[{"name":"Leopan0","email":"33919622+Leopan0@users.noreply.github.com","commits":1}]},"readingTime":{"minutes":21.11,"words":6333},"filePathRelative":"zh/后端/Java/Java基础/线程池.md","localizedDate":"2023年5月25日","excerpt":"<h1> 线程池</h1>\\n<h2> 始</h2>\\n<p>​\\t\\t多线程是项目扩大以后，必不可少需要应用到的技术。线程池的应用，更加便利多线程的使用。 Java 默认支持线程池，在 Java 线程池的基础上，Pivotal 在 Spring 框架内，提供了 Spring 线程池。两者皆是主流的线程池。</p>\\n<h3> 基本概念</h3>\\n<ul>\\n<li>线程池，本质上是一种对象池，用于管理线程资源。</li>\\n<li>在任务执行前，需要从线程池中拿出线程来执行。</li>\\n<li>在任务执行完成之后，需要把线程放回线程池。</li>\\n<li>通过线程的这种反复利用机制，可以有效地避免直接创建线程所带来的坏处。</li>\\n</ul>","copyright":{"author":"会跳舞的石头"},"autoDesc":true}');export{e as data};
