import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as i,o as r,c,a,b as s,d as n,f as o}from"./app-666a94fb.js";const d={},l=a("p",null,"Lua 脚本的基础语法和C系语言是相通的，详情基本语法可以看这里",-1),p={href:"https://www.runoob.com/lua/lua-tutorial.html",target:"_blank",rel:"noopener noreferrer"},u=o(`<p>本文主要介绍Lua脚本和Redis的用法。Lua 脚本在redis中是被视为一次操作的，意味着Lua脚本具有原子性，让我们无需考虑并发问题。Lua和redis结合有多种形式，下面是简单示例</p><blockquote><p>需要保证redis版本支持 Lua 脚本</p></blockquote><h2 id="如何执行lua脚本" tabindex="-1"><a class="header-anchor" href="#如何执行lua脚本" aria-hidden="true">#</a> 如何执行Lua脚本</h2><h3 id="执行命令" tabindex="-1"><a class="header-anchor" href="#执行命令" aria-hidden="true">#</a> 执行命令</h3><p>Lua 脚本在redis中有两种命令可以实现 <code>EVAL</code> 和 <code>EVALSHA</code></p><h4 id="eval" tabindex="-1"><a class="header-anchor" href="#eval" aria-hidden="true">#</a> EVAL</h4><p>EVAL命令直接对脚本进行求值</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#格式</span>
<span class="token builtin class-name">eval</span> script numkeys key <span class="token punctuation">[</span>key <span class="token punctuation">..</span>.<span class="token punctuation">]</span> arg <span class="token punctuation">[</span>arg <span class="token punctuation">..</span>.<span class="token punctuation">]</span>
<span class="token comment">#参数说明</span>
<span class="token comment">#script：是一段 Lua 5.1 脚本程序，它会被运行在 Redis 服务器上下文中，这段脚本不必(也不应该)定义为一个 Lua 函数。</span>
<span class="token comment">#numkeys:用于指定键名参数的个数。</span>
<span class="token comment">#key：键名参数，表示在脚本中所用到的那些 Redis 键(key)，这些键名参数可以在 Lua 中通过全局变量 KEYS 数组，用 1 为基址的形式访问( KEYS[1] ， KEYS[2] ，以此类推)。</span>
<span class="token comment">#arg：全局变量，可以在 Lua 中通过全局变量 ARGV 数组访问，访问的形式和 KEYS 变量类似( ARGV[1] 、 ARGV[2] ，诸如此类)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="evalsha" tabindex="-1"><a class="header-anchor" href="#evalsha" aria-hidden="true">#</a> EVALSHA</h4><p>EVALSHA 要求输入某个脚本的 SHA1 校验和， 这个校验和所对应的脚本必须至少被EVAL 执行过一次。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">#格式</span>
evalsha sha1 numkeys key <span class="token punctuation">[</span>key <span class="token punctuation">..</span>.<span class="token punctuation">]</span> arg <span class="token punctuation">[</span>arg <span class="token punctuation">..</span>.<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>换句话说，我们编写重复执行的脚本，后续可以通过EVALSHA来再次执行，Redis会通过SHA记录这次操作</p></blockquote><h3 id="辅助命令" tabindex="-1"><a class="header-anchor" href="#辅助命令" aria-hidden="true">#</a> 辅助命令</h3><h4 id="script-load" tabindex="-1"><a class="header-anchor" href="#script-load" aria-hidden="true">#</a> script load</h4><p>示例</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>script load <span class="token string">&quot;return &#39;hello&#39;&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这个脚本的作用是将脚本添加到缓存当中，如果有需要可以直接用 <code>EVALSHA</code> 命令执行，脚本可以保留到 SCRIPT FLUSH 为止</p><h4 id="script-exists" tabindex="-1"><a class="header-anchor" href="#script-exists" aria-hidden="true">#</a> script exists</h4><p>判断某个脚本是否存在</p><h4 id="script-kill" tabindex="-1"><a class="header-anchor" href="#script-kill" aria-hidden="true">#</a> script kill</h4><p>杀死当前正在运行的 Lua 脚本，当且仅当这个脚本没有执行过任何写操作时，这个命令才生效。</p><h4 id="script-flush" tabindex="-1"><a class="header-anchor" href="#script-flush" aria-hidden="true">#</a> script flush</h4><p>清除所有Lua脚本</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>`,24),h={href:"https://redisbook.readthedocs.io/en/latest/feature/scripting.html",target:"_blank",rel:"noopener noreferrer"},m={href:"https://www.cnblogs.com/yaopengfei/p/13941841.html",target:"_blank",rel:"noopener noreferrer"};function b(k,v){const e=i("ExternalLinkIcon");return r(),c("div",null,[l,a("p",null,[a("a",p,[s("Lua 教程 | 菜鸟教程 (runoob.com)"),n(e)])]),u,a("p",null,[a("a",h,[s("Lua 脚本 — Redis 设计与实现 (redisbook.readthedocs.io)"),n(e)])]),a("p",null,[a("a",m,[s("第十节：Redis 脚本、Lua语法学习、以及秒杀案例脚本分析 - Yaopengfei - 博客园 (cnblogs.com)"),n(e)])])])}const _=t(d,[["render",b],["__file","Lua脚本.html.vue"]]);export{_ as default};
